SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE    1

************ OBJECT LISTING ************

FILE NAME: Z:\Users\thomas\Projekte\fxSDK\Bob\logic.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c     1    /*
         logic.c     2     * logic.c
         logic.c     3     * by xythobuz
         logic.c     4     */
         logic.c     5    #include "fxlib.h"
         logic.c     6    #include "Draw.h"
         logic.c     7    #include "levels.h"
         logic.c     8    #include "timer.h"
         logic.c     9    #include "button.h"
         logic.c    10    
         logic.c    11    #define T1_TIMEOUT 4 // Alle 100ms
         logic.c    12    #define BELOW 0
         logic.c    13    #define ABOVE 1
         logic.c    14    #define RIGHT 2
         logic.c    15    #define LEFT 3
         logic.c    16    #define JUMPHEIGHT 18
         logic.c    17    
         logic.c    18    int hp = 5;
         logic.c    19    int score = 0;
         logic.c    20    char xPlayer = 16;
         logic.c    21    char yPlayer = 40;
         logic.c    22    char dirPlayer = 0;
         logic.c    23    unsigned int viewOffset = 0;
         logic.c    24    
         logic.c    25    unsigned char HUDstring[4];
         logic.c    26    
         logic.c    27    int isJumping = 0;
         logic.c    28    
         logic.c    29    unsigned int timer1 = 0;
         logic.c    30    unsigned int timer1Flag = 0;
         logic.c    31    
         logic.c    32    char getBlock1(char x, char y) {
P   00000000              _getBlock1:                      ; function: getBlock1
                                                           ; frame size=0
    00000000 605E                   EXTS.B      R5,R0
    00000002 8800                   CMP/EQ      #0,R0
    00000004 8D10                   BT/S        L573
    00000006 664E                   EXTS.B      R4,R6
    00000008 8801                   CMP/EQ      #1,R0
    0000000A 8910                   BT          L574
    0000000C 8802                   CMP/EQ      #2,R0
    0000000E 8911                   BT          L575
    00000010 8803                   CMP/EQ      #3,R0
    00000012 8912                   BT          L576
    00000014 8804                   CMP/EQ      #4,R0
    00000016 8913                   BT          L577
    00000018 8805                   CMP/EQ      #5,R0
    0000001A 8914                   BT          L578
    0000001C 8806                   CMP/EQ      #6,R0
    0000001E 8915                   BT          L579
    00000020 8807                   CMP/EQ      #7,R0
    00000022 8916                   BT          L580
    00000024 A018                   BRA         L581
    00000026 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000028              L573:                            ; case label 
         logic.c    33            switch(y) {
         logic.c    34                    case 0:
         logic.c    35                            return lvl1_Block_0[x];
    00000028 D047                   MOV.L       L863,R0    ; _lvl1_Block_0
    0000002A A013                   BRA         L828
    0000002C 0009                   NOP
    0000002E              L574:                            ; case label 
         logic.c    36                    case 1:
         logic.c    37                            return lvl1_Block_1[x];
    0000002E D047                   MOV.L       L863+4,R0  ; _lvl1_Block_1
    00000030 A010                   BRA         L828
    00000032 0009                   NOP
    00000034              L575:                            ; case label 
         logic.c    38                    case 2:
         logic.c    39                            return lvl1_Block_2[x];
    00000034 D046                   MOV.L       L863+8,R0  ; _lvl1_Block_2
    00000036 A00D                   BRA         L828
    00000038 0009                   NOP
    0000003A              L576:                            ; case label 
         logic.c    40                    case 3:
         logic.c    41                            return lvl1_Block_3[x];
    0000003A D046                   MOV.L       L863+12,R0 ; _lvl1_Block_3
    0000003C A00A                   BRA         L828
    0000003E 0009                   NOP
    00000040              L577:                            ; case label 
         logic.c    42                    case 4:
         logic.c    43                            return lvl1_Block_4[x];
    00000040 D045                   MOV.L       L863+16,R0 ; _lvl1_Block_4
    00000042 A007                   BRA         L828
    00000044 0009                   NOP
    00000046              L578:                            ; case label 
         logic.c    44                    case 5:
         logic.c    45                            return lvl1_Block_5[x];
    00000046 D045                   MOV.L       L863+20,R0 ; _lvl1_Block_5
    00000048 A004                   BRA         L828
    0000004A 0009                   NOP
    0000004C              L579:                            ; case label 
         logic.c    46                    case 6:
         logic.c    47                            return lvl1_Block_6[x];
    0000004C D044                   MOV.L       L863+24,R0 ; _lvl1_Block_6
    0000004E A001                   BRA         L828
    00000050 0009                   NOP
    00000052              L580:                            ; case label 
         logic.c    48                    case 7:
         logic.c    49                            return lvl1_Block_7[x];
    00000052 D044                   MOV.L       L863+28,R0 ; _lvl1_Block_7
    00000054              L828:                             
    00000054 000B                   RTS
    00000056 006C                   MOV.B       @(R0,R6),R0
    00000058              L581:                            ; default label 
         logic.c    50    
         logic.c    51                    default:
         logic.c    52                            return -1;
    00000058 E0FF                   MOV         #-1,R0
         logic.c    53            }
         logic.c    54    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000005A              L679:                             
    0000005A 000B                   RTS
    0000005C 0009                   NOP
         logic.c    55    
         logic.c    56    char getBox1(char x, char y) {
    0000005E              _getBox1:                        ; function: getBox1
                                                           ; frame size=0
    0000005E 605E                   EXTS.B      R5,R0
    00000060 8800                   CMP/EQ      #0,R0
    00000062 8D10                   BT/S        L582
    00000064 664E                   EXTS.B      R4,R6
    00000066 8801                   CMP/EQ      #1,R0
    00000068 8910                   BT          L583
    0000006A 8802                   CMP/EQ      #2,R0
    0000006C 8911                   BT          L584
    0000006E 8803                   CMP/EQ      #3,R0
    00000070 8912                   BT          L585
    00000072 8804                   CMP/EQ      #4,R0
    00000074 8913                   BT          L586
    00000076 8805                   CMP/EQ      #5,R0
    00000078 8914                   BT          L587
    0000007A 8806                   CMP/EQ      #6,R0
    0000007C 8915                   BT          L588
    0000007E 8807                   CMP/EQ      #7,R0
    00000080 8916                   BT          L589
    00000082 A018                   BRA         L590
    00000084 0009                   NOP
    00000086              L582:                            ; case label 
         logic.c    57            switch(y) {
         logic.c    58                    case 0:
         logic.c    59                            return lvl1_Box_0[x];
    00000086 D038                   MOV.L       L863+32,R0 ; _lvl1_Box_0
    00000088 A013                   BRA         L835
    0000008A 0009                   NOP
    0000008C              L583:                            ; case label 
         logic.c    60                    case 1:
         logic.c    61                            return lvl1_Box_1[x];
    0000008C D037                   MOV.L       L863+36,R0 ; _lvl1_Box_1
    0000008E A010                   BRA         L835
    00000090 0009                   NOP
    00000092              L584:                            ; case label 
         logic.c    62                    case 2:
         logic.c    63                            return lvl1_Box_2[x];
    00000092 D037                   MOV.L       L863+40,R0 ; _lvl1_Box_2
    00000094 A00D                   BRA         L835
    00000096 0009                   NOP
    00000098              L585:                            ; case label 
         logic.c    64                    case 3:
         logic.c    65                            return lvl1_Box_3[x];
    00000098 D036                   MOV.L       L863+44,R0 ; _lvl1_Box_3
    0000009A A00A                   BRA         L835
    0000009C 0009                   NOP
    0000009E              L586:                            ; case label 
         logic.c    66                    case 4:
         logic.c    67                            return lvl1_Box_4[x];
    0000009E D036                   MOV.L       L863+48,R0 ; _lvl1_Box_4
    000000A0 A007                   BRA         L835




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000A2 0009                   NOP
    000000A4              L587:                            ; case label 
         logic.c    68                    case 5:
         logic.c    69                            return lvl1_Box_5[x];
    000000A4 D035                   MOV.L       L863+52,R0 ; _lvl1_Box_5
    000000A6 A004                   BRA         L835
    000000A8 0009                   NOP
    000000AA              L588:                            ; case label 
         logic.c    70                    case 6:
         logic.c    71                            return lvl1_Box_6[x];
    000000AA D035                   MOV.L       L863+56,R0 ; _lvl1_Box_6
    000000AC A001                   BRA         L835
    000000AE 0009                   NOP
    000000B0              L589:                            ; case label 
         logic.c    72                    case 7:
         logic.c    73                            return lvl1_Box_7[x];
    000000B0 D034                   MOV.L       L863+60,R0 ; _lvl1_Box_7
    000000B2              L835:                             
    000000B2 000B                   RTS
    000000B4 006C                   MOV.B       @(R0,R6),R0
    000000B6              L590:                            ; default label 
         logic.c    74    
         logic.c    75                    default:
         logic.c    76                            return -1;
    000000B6 E0FF                   MOV         #-1,R0
         logic.c    77            }
         logic.c    78    }
    000000B8              L681:                             
    000000B8 000B                   RTS
    000000BA 0009                   NOP
         logic.c    79    
         logic.c    80    char getCoin1(char x, char y) {
    000000BC              _getCoin1:                       ; function: getCoin1
                                                           ; frame size=0
    000000BC 605E                   EXTS.B      R5,R0
    000000BE 8800                   CMP/EQ      #0,R0
    000000C0 8D10                   BT/S        L591
    000000C2 664E                   EXTS.B      R4,R6
    000000C4 8801                   CMP/EQ      #1,R0
    000000C6 8910                   BT          L592
    000000C8 8802                   CMP/EQ      #2,R0
    000000CA 8911                   BT          L593
    000000CC 8803                   CMP/EQ      #3,R0
    000000CE 8912                   BT          L594
    000000D0 8804                   CMP/EQ      #4,R0
    000000D2 8913                   BT          L595
    000000D4 8805                   CMP/EQ      #5,R0
    000000D6 8914                   BT          L596
    000000D8 8806                   CMP/EQ      #6,R0
    000000DA 8915                   BT          L597
    000000DC 8807                   CMP/EQ      #7,R0
    000000DE 8916                   BT          L598
    000000E0 A018                   BRA         L599
    000000E2 0009                   NOP
    000000E4              L591:                            ; case label 
         logic.c    81            switch(y) {
         logic.c    82                    case 0:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c    83                            return lvl1_Coin_0[x];
    000000E4 D028                   MOV.L       L863+64,R0 ; _lvl1_Coin_0
    000000E6 A013                   BRA         L842
    000000E8 0009                   NOP
    000000EA              L592:                            ; case label 
         logic.c    84                    case 1:
         logic.c    85                            return lvl1_Coin_1[x];
    000000EA D028                   MOV.L       L863+68,R0 ; _lvl1_Coin_1
    000000EC A010                   BRA         L842
    000000EE 0009                   NOP
    000000F0              L593:                            ; case label 
         logic.c    86                    case 2:
         logic.c    87                            return lvl1_Coin_2[x];
    000000F0 D027                   MOV.L       L863+72,R0 ; _lvl1_Coin_2
    000000F2 A00D                   BRA         L842
    000000F4 0009                   NOP
    000000F6              L594:                            ; case label 
         logic.c    88                    case 3:
         logic.c    89                            return lvl1_Coin_3[x];
    000000F6 D027                   MOV.L       L863+76,R0 ; _lvl1_Coin_3
    000000F8 A00A                   BRA         L842
    000000FA 0009                   NOP
    000000FC              L595:                            ; case label 
         logic.c    90                    case 4:
         logic.c    91                            return lvl1_Coin_4[x];
    000000FC D026                   MOV.L       L863+80,R0 ; _lvl1_Coin_4
    000000FE A007                   BRA         L842
    00000100 0009                   NOP
    00000102              L596:                            ; case label 
         logic.c    92                    case 5:
         logic.c    93                            return lvl1_Coin_5[x];
    00000102 D026                   MOV.L       L863+84,R0 ; _lvl1_Coin_5
    00000104 A004                   BRA         L842
    00000106 0009                   NOP
    00000108              L597:                            ; case label 
         logic.c    94                    case 6:
         logic.c    95                            return lvl1_Coin_6[x];
    00000108 D025                   MOV.L       L863+88,R0 ; _lvl1_Coin_6
    0000010A A001                   BRA         L842
    0000010C 0009                   NOP
    0000010E              L598:                            ; case label 
         logic.c    96                    case 7:
         logic.c    97                            return lvl1_Coin_7[x];
    0000010E D025                   MOV.L       L863+92,R0 ; _lvl1_Coin_7
    00000110              L842:                             
    00000110 000B                   RTS
    00000112 006C                   MOV.B       @(R0,R6),R0
    00000114              L599:                            ; default label 
         logic.c    98    
         logic.c    99                    default:
         logic.c   100                            return -1;
    00000114 E0FF                   MOV         #-1,R0
         logic.c   101            }
         logic.c   102    }
    00000116              L683:                             
    00000116 000B                   RTS
    00000118 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c   103    
         logic.c   104    void setCoin1(char x, char y, char val) {
    0000011A              _setCoin1:                       ; function: setCoin1
                                                           ; frame size=0
    0000011A 605E                   EXTS.B      R5,R0
    0000011C 8800                   CMP/EQ      #0,R0
    0000011E 8D10                   BT/S        L600
    00000120 674E                   EXTS.B      R4,R7
    00000122 8801                   CMP/EQ      #1,R0
    00000124 8940                   BT          L601
    00000126 8802                   CMP/EQ      #2,R0
    00000128 8941                   BT          L602
    0000012A 8803                   CMP/EQ      #3,R0
    0000012C 8942                   BT          L603
    0000012E 8804                   CMP/EQ      #4,R0
    00000130 8943                   BT          L604
    00000132 8805                   CMP/EQ      #5,R0
    00000134 8944                   BT          L605
    00000136 8806                   CMP/EQ      #6,R0
    00000138 8945                   BT          L606
    0000013A 8807                   CMP/EQ      #7,R0
    0000013C 8946                   BT          L607
    0000013E A047                   BRA         L684
    00000140 0009                   NOP
    00000142              L600:                            ; case label 
         logic.c   105            switch(y) {
         logic.c   106                    case 0:
         logic.c   107                            lvl1_Coin_0[x] = val;
    00000142 D011                   MOV.L       L863+64,R0 ; _lvl1_Coin_0
         logic.c   108                            break;
    00000144 A043                   BRA         L849
    00000146 0009                   NOP
    00000148              L863:                             
    00000148 <00000000>             .DATA.L     _lvl1_Block_0
    0000014C <00000000>             .DATA.L     _lvl1_Block_1
    00000150 <00000000>             .DATA.L     _lvl1_Block_2
    00000154 <00000000>             .DATA.L     _lvl1_Block_3
    00000158 <00000000>             .DATA.L     _lvl1_Block_4
    0000015C <00000000>             .DATA.L     _lvl1_Block_5
    00000160 <00000000>             .DATA.L     _lvl1_Block_6
    00000164 <00000000>             .DATA.L     _lvl1_Block_7
    00000168 <00000000>             .DATA.L     _lvl1_Box_0
    0000016C <00000000>             .DATA.L     _lvl1_Box_1
    00000170 <00000000>             .DATA.L     _lvl1_Box_2
    00000174 <00000000>             .DATA.L     _lvl1_Box_3
    00000178 <00000000>             .DATA.L     _lvl1_Box_4
    0000017C <00000000>             .DATA.L     _lvl1_Box_5
    00000180 <00000000>             .DATA.L     _lvl1_Box_6
    00000184 <00000000>             .DATA.L     _lvl1_Box_7
    00000188 <00000000>             .DATA.L     _lvl1_Coin_0
    0000018C <00000000>             .DATA.L     _lvl1_Coin_1
    00000190 <00000000>             .DATA.L     _lvl1_Coin_2
    00000194 <00000000>             .DATA.L     _lvl1_Coin_3
    00000198 <00000000>             .DATA.L     _lvl1_Coin_4
    0000019C <00000000>             .DATA.L     _lvl1_Coin_5
    000001A0 <00000000>             .DATA.L     _lvl1_Coin_6
    000001A4 <00000000>             .DATA.L     _lvl1_Coin_7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001A8              L601:                            ; case label 
         logic.c   109                    case 1:
         logic.c   110                            lvl1_Coin_1[x] = val;
    000001A8 D05A                   MOV.L       L864,R0    ; _lvl1_Coin_1
         logic.c   111                            break;
    000001AA A010                   BRA         L849
    000001AC 0009                   NOP
    000001AE              L602:                            ; case label 
         logic.c   112                    case 2:
         logic.c   113                            lvl1_Coin_2[x] = val;
    000001AE D05A                   MOV.L       L864+4,R0  ; _lvl1_Coin_2
         logic.c   114                            break;
    000001B0 A00D                   BRA         L849
    000001B2 0009                   NOP
    000001B4              L603:                            ; case label 
         logic.c   115                    case 3:
         logic.c   116                            lvl1_Coin_3[x] = val;
    000001B4 D059                   MOV.L       L864+8,R0  ; _lvl1_Coin_3
         logic.c   117                            break;
    000001B6 A00A                   BRA         L849
    000001B8 0009                   NOP
    000001BA              L604:                            ; case label 
         logic.c   118                    case 4:
         logic.c   119                            lvl1_Coin_4[x] = val;
    000001BA D059                   MOV.L       L864+12,R0 ; _lvl1_Coin_4
         logic.c   120                            break;
    000001BC A007                   BRA         L849
    000001BE 0009                   NOP
    000001C0              L605:                            ; case label 
         logic.c   121                    case 5:
         logic.c   122                            lvl1_Coin_5[x] = val;
    000001C0 D058                   MOV.L       L864+16,R0 ; _lvl1_Coin_5
         logic.c   123                            break;
    000001C2 A004                   BRA         L849
    000001C4 0009                   NOP
    000001C6              L606:                            ; case label 
         logic.c   124                    case 6:
         logic.c   125                            lvl1_Coin_6[x] = val;
    000001C6 D058                   MOV.L       L864+20,R0 ; _lvl1_Coin_6
         logic.c   126                            break;
    000001C8 A001                   BRA         L849
    000001CA 0009                   NOP
    000001CC              L607:                            ; case label 
         logic.c   127                    case 7:
         logic.c   128                            lvl1_Coin_7[x] = val;
    000001CC D057                   MOV.L       L864+24,R0 ; _lvl1_Coin_7
         logic.c   129                            break;
    000001CE              L849:                             
    000001CE 0764                   MOV.B       R6,@(R0,R7)
         logic.c   130    
         logic.c   131                    default:
         logic.c   132                            break;
    000001D0              L684:                             
         logic.c   133            }
         logic.c   134    }
    000001D0 000B                   RTS
    000001D2 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c   135    
         logic.c   136    void setBox1(char x, char y, char val) {
    000001D4              _setBox1:                        ; function: setBox1
                                                           ; frame size=0
    000001D4 605E                   EXTS.B      R5,R0
    000001D6 8800                   CMP/EQ      #0,R0
    000001D8 8D10                   BT/S        L609
    000001DA 674E                   EXTS.B      R4,R7
    000001DC 8801                   CMP/EQ      #1,R0
    000001DE 8910                   BT          L610
    000001E0 8802                   CMP/EQ      #2,R0
    000001E2 8911                   BT          L611
    000001E4 8803                   CMP/EQ      #3,R0
    000001E6 8912                   BT          L612
    000001E8 8804                   CMP/EQ      #4,R0
    000001EA 8913                   BT          L613
    000001EC 8805                   CMP/EQ      #5,R0
    000001EE 8914                   BT          L614
    000001F0 8806                   CMP/EQ      #6,R0
    000001F2 8915                   BT          L615
    000001F4 8807                   CMP/EQ      #7,R0
    000001F6 8916                   BT          L616
    000001F8 A017                   BRA         L685
    000001FA 0009                   NOP
    000001FC              L609:                            ; case label 
         logic.c   137            switch(y) {
         logic.c   138                    case 0:
         logic.c   139                            lvl1_Box_0[x] = val;
    000001FC D04C                   MOV.L       L864+28,R0 ; _lvl1_Box_0
         logic.c   140                            break;
    000001FE A013                   BRA         L856
    00000200 0009                   NOP
    00000202              L610:                            ; case label 
         logic.c   141                    case 1:
         logic.c   142                            lvl1_Box_1[x] = val;
    00000202 D04C                   MOV.L       L864+32,R0 ; _lvl1_Box_1
         logic.c   143                            break;
    00000204 A010                   BRA         L856
    00000206 0009                   NOP
    00000208              L611:                            ; case label 
         logic.c   144                    case 2:
         logic.c   145                            lvl1_Box_2[x] = val;
    00000208 D04B                   MOV.L       L864+36,R0 ; _lvl1_Box_2
         logic.c   146                            break;
    0000020A A00D                   BRA         L856
    0000020C 0009                   NOP
    0000020E              L612:                            ; case label 
         logic.c   147                    case 3:
         logic.c   148                            lvl1_Box_3[x] = val;
    0000020E D04B                   MOV.L       L864+40,R0 ; _lvl1_Box_3
         logic.c   149                            break;
    00000210 A00A                   BRA         L856
    00000212 0009                   NOP
    00000214              L613:                            ; case label 
         logic.c   150                    case 4:
         logic.c   151                            lvl1_Box_4[x] = val;
    00000214 D04A                   MOV.L       L864+44,R0 ; _lvl1_Box_4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c   152                            break;
    00000216 A007                   BRA         L856
    00000218 0009                   NOP
    0000021A              L614:                            ; case label 
         logic.c   153                    case 5:
         logic.c   154                            lvl1_Box_5[x] = val;
    0000021A D04A                   MOV.L       L864+48,R0 ; _lvl1_Box_5
         logic.c   155                            break;
    0000021C A004                   BRA         L856
    0000021E 0009                   NOP
    00000220              L615:                            ; case label 
         logic.c   156                    case 6:
         logic.c   157                            lvl1_Box_6[x] = val;
    00000220 D049                   MOV.L       L864+52,R0 ; _lvl1_Box_6
         logic.c   158                            break;
    00000222 A001                   BRA         L856
    00000224 0009                   NOP
    00000226              L616:                            ; case label 
         logic.c   159                    case 7:
         logic.c   160                            lvl1_Box_7[x] = val;
    00000226 D049                   MOV.L       L864+56,R0 ; _lvl1_Box_7
         logic.c   161                            break;
    00000228              L856:                             
    00000228 0764                   MOV.B       R6,@(R0,R7)
         logic.c   162    
         logic.c   163                    default:
         logic.c   164                            break;
    0000022A              L685:                             
         logic.c   165            }
         logic.c   166    }
    0000022A 000B                   RTS
    0000022C 0009                   NOP
         logic.c   167    
         logic.c   168    void DrawLevel1() {
    0000022E              _DrawLevel1:                     ; function: DrawLevel1
                                                           ; frame size=32
    0000022E 2FE6                   MOV.L       R14,@-R15
    00000230 2FD6                   MOV.L       R13,@-R15
         logic.c   169            // Draw all the elements, according to view-offset
         logic.c   170            int length;
         logic.c   171            int i;
         logic.c   172            int res;
         logic.c   173            int a;
         logic.c   174            for (a = 0; a < 8; a++) {
    00000232 ED00                   MOV         #0,R13
    00000234 2FC6                   MOV.L       R12,@-R15
    00000236 6ED3                   MOV         R13,R14
    00000238 2FB6                   MOV.L       R11,@-R15
    0000023A 2FA6                   MOV.L       R10,@-R15
    0000023C 2F96                   MOV.L       R9,@-R15
    0000023E 2F86                   MOV.L       R8,@-R15
    00000240 4F22                   STS.L       PR,@-R15
    00000242 D843                   MOV.L       L864+60,R8 ; _DrawBox
    00000244 DB43                   MOV.L       L864+64,R11; _viewOffset
    00000246              L686:                             
         logic.c   175                    length = getsizeBlock1(a);
    00000246 D344                   MOV.L       L864+68,R3 ; _getsizeBlock1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000248 430B                   JSR         @R3
    0000024A 64E3                   MOV         R14,R4
    0000024C 6903                   MOV         R0,R9
         logic.c   176                    for (i = 0; i < length; i++) {
    0000024E 4915                   CMP/PL      R9
    00000250 8F12                   BF/S        L687
    00000252 6AD3                   MOV         R13,R10
    00000254              L688:                             
         logic.c   177                            res = getBlock1(i, a) - viewOffset;
    00000254 65E3                   MOV         R14,R5
    00000256 BED3                   BSR         _getBlock1
    00000258 64A3                   MOV         R10,R4
    0000025A 6C0E                   EXTS.B      R0,R12
    0000025C 63B2                   MOV.L       @R11,R3
    0000025E 3C38                   SUB         R3,R12
         logic.c   178                            if ((res >= 0) && (res < 16)) {
    00000260 4C11                   CMP/PZ      R12
    00000262 8B06                   BF          L689
    00000264 E310                   MOV         #16,R3
    00000266 3C33                   CMP/GE      R3,R12
    00000268 8903                   BT          L689
         logic.c   179                                    DrawBlock(res, a);
    0000026A 65E3                   MOV         R14,R5
    0000026C D33B                   MOV.L       L864+72,R3 ; _DrawBlock
    0000026E 430B                   JSR         @R3
    00000270 64C3                   MOV         R12,R4
    00000272              L689:                             
    00000272 7A01                   ADD         #1,R10
    00000274 3A93                   CMP/GE      R9,R10
    00000276 8BED                   BF          L688
    00000278              L687:                             
         logic.c   180                            }
         logic.c   181                    }
         logic.c   182    
         logic.c   183                    length = getsizeBox1(a);
    00000278 D339                   MOV.L       L864+76,R3 ; _getsizeBox1
    0000027A 430B                   JSR         @R3
    0000027C 64E3                   MOV         R14,R4
    0000027E 6903                   MOV         R0,R9
         logic.c   184                    for (i = 0; i < length; i++) {
    00000280 4915                   CMP/PL      R9
    00000282 8F11                   BF/S        L690
    00000284 6AD3                   MOV         R13,R10
    00000286              L691:                             
         logic.c   185                            res = getBox1(i, a) - viewOffset;
    00000286 65E3                   MOV         R14,R5
    00000288 BEE9                   BSR         _getBox1
    0000028A 64A3                   MOV         R10,R4
    0000028C 63B2                   MOV.L       @R11,R3
    0000028E 6C0E                   EXTS.B      R0,R12
    00000290 3C38                   SUB         R3,R12
         logic.c   186                            if ((res >= 0) && (res < 16)) {
    00000292 4C11                   CMP/PZ      R12
    00000294 8B05                   BF          L692
    00000296 E310                   MOV         #16,R3
    00000298 3C33                   CMP/GE      R3,R12
    0000029A 8902                   BT          L692




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c   187                                    DrawBox(res, a);
    0000029C 65E3                   MOV         R14,R5
    0000029E 480B                   JSR         @R8
    000002A0 64C3                   MOV         R12,R4
    000002A2              L692:                             
    000002A2 7A01                   ADD         #1,R10
    000002A4 3A93                   CMP/GE      R9,R10
    000002A6 8BEE                   BF          L691
    000002A8              L690:                             
         logic.c   188                            }
         logic.c   189                    }
         logic.c   190    
         logic.c   191                    length = getsizeCoin1(a);
    000002A8 D22E                   MOV.L       L864+80,R2 ; _getsizeCoin1
    000002AA 420B                   JSR         @R2
    000002AC 64E3                   MOV         R14,R4
    000002AE 6903                   MOV         R0,R9
         logic.c   192                    for (i = 0; i < length; i++) {
    000002B0 4915                   CMP/PL      R9
    000002B2 8F12                   BF/S        L693
    000002B4 6AD3                   MOV         R13,R10
    000002B6              L694:                             
         logic.c   193                            res = getCoin1(i, a) - viewOffset;
    000002B6 65E3                   MOV         R14,R5
    000002B8 BF00                   BSR         _getCoin1
    000002BA 64A3                   MOV         R10,R4
    000002BC 63B2                   MOV.L       @R11,R3
    000002BE 6C0E                   EXTS.B      R0,R12
    000002C0 3C38                   SUB         R3,R12
         logic.c   194                            if ((res >= 0) && (res < 16)) {
    000002C2 4C11                   CMP/PZ      R12
    000002C4 8B06                   BF          L695
    000002C6 E310                   MOV         #16,R3
    000002C8 3C33                   CMP/GE      R3,R12
    000002CA 8903                   BT          L695
         logic.c   195                                    DrawCoin(res, a);
    000002CC D326                   MOV.L       L864+84,R3 ; _DrawCoin
    000002CE 65E3                   MOV         R14,R5
    000002D0 430B                   JSR         @R3
    000002D2 64C3                   MOV         R12,R4
    000002D4              L695:                             
    000002D4 7A01                   ADD         #1,R10
    000002D6 3A93                   CMP/GE      R9,R10
    000002D8 8BED                   BF          L694
    000002DA              L693:                             
    000002DA 7E01                   ADD         #1,R14
    000002DC E308                   MOV         #8,R3
    000002DE 3E33                   CMP/GE      R3,R14
    000002E0 8BB1                   BF          L686
         logic.c   196                            }
         logic.c   197                    }
         logic.c   198            }
         logic.c   199            DrawPlayer(xPlayer, yPlayer, dirPlayer);
    000002E2 D122                   MOV.L       L864+88,R1 ; _dirPlayer
    000002E4 D322                   MOV.L       L864+92,R3 ; _yPlayer
    000002E6 6610                   MOV.B       @R1,R6
    000002E8 6530                   MOV.B       @R3,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002EA D222                   MOV.L       L864+96,R2 ; _xPlayer
    000002EC 4F26                   LDS.L       @R15+,PR
    000002EE 6420                   MOV.B       @R2,R4
    000002F0 68F6                   MOV.L       @R15+,R8
    000002F2 69F6                   MOV.L       @R15+,R9
    000002F4 D320                   MOV.L       L864+100,R3; _DrawPlayer
    000002F6 6AF6                   MOV.L       @R15+,R10
    000002F8 6BF6                   MOV.L       @R15+,R11
    000002FA 6CF6                   MOV.L       @R15+,R12
    000002FC 6DF6                   MOV.L       @R15+,R13
    000002FE 432B                   JMP         @R3
    00000300 6EF6                   MOV.L       @R15+,R14
         logic.c   200    }
         logic.c   201    
         logic.c   202    void timer_1() {
    00000302              _timer_1:                        ; function: timer_1
                                                           ; frame size=0
         logic.c   203            timer1++;
    00000302 D41E                   MOV.L       L864+104,R4; _timer1
    00000304 6342                   MOV.L       @R4,R3
    00000306 7301                   ADD         #1,R3
    00000308 2432                   MOV.L       R3,@R4
         logic.c   204            timer1Flag++;
    0000030A D41D                   MOV.L       L864+108,R4; _timer1Flag
    0000030C 6242                   MOV.L       @R4,R2
    0000030E 7201                   ADD         #1,R2
         logic.c   205    }
    00000310 000B                   RTS
    00000312 2422                   MOV.L       R2,@R4
    00000314              L864:                             
    00000314 <00000000>             .DATA.L     _lvl1_Coin_1
    00000318 <00000000>             .DATA.L     _lvl1_Coin_2
    0000031C <00000000>             .DATA.L     _lvl1_Coin_3
    00000320 <00000000>             .DATA.L     _lvl1_Coin_4
    00000324 <00000000>             .DATA.L     _lvl1_Coin_5
    00000328 <00000000>             .DATA.L     _lvl1_Coin_6
    0000032C <00000000>             .DATA.L     _lvl1_Coin_7
    00000330 <00000000>             .DATA.L     _lvl1_Box_0
    00000334 <00000000>             .DATA.L     _lvl1_Box_1
    00000338 <00000000>             .DATA.L     _lvl1_Box_2
    0000033C <00000000>             .DATA.L     _lvl1_Box_3
    00000340 <00000000>             .DATA.L     _lvl1_Box_4
    00000344 <00000000>             .DATA.L     _lvl1_Box_5
    00000348 <00000000>             .DATA.L     _lvl1_Box_6
    0000034C <00000000>             .DATA.L     _lvl1_Box_7
    00000350 <00000000>             .DATA.L     _DrawBox
    00000354 <00000000>             .DATA.L     _viewOffset
    00000358 <00000000>             .DATA.L     _getsizeBlock1
    0000035C <00000000>             .DATA.L     _DrawBlock
    00000360 <00000000>             .DATA.L     _getsizeBox1
    00000364 <00000000>             .DATA.L     _getsizeCoin1
    00000368 <00000000>             .DATA.L     _DrawCoin
    0000036C <00000000>             .DATA.L     _dirPlayer
    00000370 <00000000>             .DATA.L     _yPlayer
    00000374 <00000000>             .DATA.L     _xPlayer
    00000378 <00000000>             .DATA.L     _DrawPlayer
    0000037C <00000000>             .DATA.L     _timer1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000380 <00000000>             .DATA.L     _timer1Flag
         logic.c   206    
         logic.c   207    int PlayLevel1() {
    00000384              _PlayLevel1:                     ; function: PlayLevel1
                                                           ; frame size=28
    00000384 2FE6                   MOV.L       R14,@-R15
         logic.c   208            char buttons;
         logic.c   209            int res;
         logic.c   210            int off;
         logic.c   211    
         logic.c   212            SetTimer(ID_USER_TIMER1, T1_TIMEOUT, *timer_1);
    00000386 E504                   MOV         #4,R5
    00000388 D375                   MOV.L       L865+6,R3  ; _SetTimer
    0000038A 2FD6                   MOV.L       R13,@-R15
    0000038C 2FC6                   MOV.L       R12,@-R15
    0000038E 2FB6                   MOV.L       R11,@-R15
    00000390 4F22                   STS.L       PR,@-R15
    00000392 7FFC                   ADD         #-4,R15
    00000394 D671                   MOV.L       L865+2,R6  ; _timer_1
    00000396 430B                   JSR         @R3
    00000398 E401                   MOV         #1,R4
         logic.c   213            while (1) {
    0000039A              L697:                             
         logic.c   214                    if (hp < 0) {
    0000039A D472                   MOV.L       L865+10,R4 ; _hp
    0000039C 6342                   MOV.L       @R4,R3
    0000039E 4311                   CMP/PZ      R3
    000003A0 8901                   BT          L866
    000003A2 A0D3                   BRA         L703
    000003A4 0009                   NOP
    000003A6              L866:                             
         logic.c   215                            break;
         logic.c   216                    }
         logic.c   217                    if (timer1 >= 10) {
    000003A6 E50A                   MOV         #10,R5
    000003A8 D46F                   MOV.L       L865+14,R4 ; _timer1
    000003AA 6342                   MOV.L       @R4,R3
    000003AC 3352                   CMP/HS      R5,R3
    000003AE 8F01                   BF/S        L700
    000003B0 EB00                   MOV         #0,R11
         logic.c   218                            timer1 = 0;
    000003B2 24B2                   MOV.L       R11,@R4
    000003B4              L700:                             
         logic.c   219                            // Gets executed every second...
         logic.c   220                            
         logic.c   221                    }
         logic.c   222                    
         logic.c   223                    if (timer1Flag != 0) {
    000003B4 D46D                   MOV.L       L865+18,R4 ; _timer1Flag
    000003B6 6342                   MOV.L       @R4,R3
    000003B8 2338                   TST         R3,R3
    000003BA 89EE                   BT          L697
         logic.c   224                            timer1Flag = 0;
         logic.c   225                            
         logic.c   226                            buttons = getButtons();
    000003BC DE6C                   MOV.L       L865+22,R14; _getButtons
    000003BE 4E0B                   JSR         @R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003C0 24B2                   MOV.L       R11,@R4
    000003C2 6503                   MOV         R0,R5
         logic.c   227                            switch (buttons) {
    000003C4 D46B                   MOV.L       L865+26,R4 ; _dirPlayer
    000003C6 605E                   EXTS.B      R5,R0
    000003C8 DC6B                   MOV.L       L865+30,R12; _yPlayer
    000003CA 88FF                   CMP/EQ      #-1,R0
    000003CC DD6B                   MOV.L       L865+34,R13; _xPlayer
    000003CE DE6C                   MOV.L       L865+38,R14; _score
    000003D0 8911                   BT          L618
    000003D2 8802                   CMP/EQ      #2,R0
    000003D4 8911                   BT          L619
    000003D6 8803                   CMP/EQ      #3,R0
    000003D8 8959                   BT          L625
    000003DA 8804                   CMP/EQ      #4,R0
    000003DC 8B01                   BF          L867
    000003DE A0A7                   BRA         L702
    000003E0 0009                   NOP
    000003E2              L867:                             
    000003E2 8800                   CMP/EQ      #0,R0
    000003E4 8B01                   BF          L868
    000003E6 A097                   BRA         L632
    000003E8 0009                   NOP
    000003EA              L868:                             
    000003EA 8801                   CMP/EQ      #1,R0
    000003EC 8B01                   BF          L869
    000003EE A095                   BRA         L633
    000003F0 0009                   NOP
    000003F2              L869:                             
    000003F2 A09D                   BRA         L702
    000003F4 0009                   NOP
    000003F6              L618:                            ; case label 
         logic.c   228                                    case -1:
         logic.c   229                                            return 0;
    000003F6 A0A9                   BRA         L703
    000003F8 E000                   MOV         #0,R0
    000003FA              L619:                            ; case label 
         logic.c   230                                            break;
         logic.c   231                                    case RIGHT:
         logic.c   232                                            // Right
         logic.c   233                                            dirPlayer = 1;
    000003FA E501                   MOV         #1,R5
    000003FC 2450                   MOV.B       R5,@R4
         logic.c   234                                            res = colPlayerHori1(RIGHT);
    000003FE B227                   BSR         _colPlayerHori1
    00000400 E402                   MOV         #2,R4
         logic.c   235                                            switch(res) {
    00000402 8800                   CMP/EQ      #0,R0
    00000404 8D1B                   BT/S        L857
    00000406 6403                   MOV         R0,R4
    00000408 8801                   CMP/EQ      #1,R0
    0000040A 8B01                   BF          L870
    0000040C A090                   BRA         L702
    0000040E 0009                   NOP
    00000410              L870:                             
    00000410 8802                   CMP/EQ      #2,R0
    00000412 8905                   BT          L622




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000414 8803                   CMP/EQ      #3,R0
    00000416 8916                   BT          L623
    00000418 8804                   CMP/EQ      #4,R0
    0000041A 8918                   BT          L624
    0000041C A088                   BRA         L702
    0000041E 0009                   NOP
    00000420              L622:                            ; case label 
         logic.c   236                                                    case 0:
         logic.c   237                                                            // Nothing
         logic.c   238                                                            move(RIGHT);
         logic.c   239                                                            break;
         logic.c   240                                                    case 1:
         logic.c   241                                                            // Box or Block
         logic.c   242                                                            break;
         logic.c   243                                                    case 2:
         logic.c   244                                                            // Coin
         logic.c   245                                                            score++;
    00000420 62E2                   MOV.L       @R14,R2
         logic.c   246                                                            removeCoin1(translateBack(xPlayer, &off) + 1, tran
                         +slateBack(yPlayer, &off));
    00000422 65F3                   MOV         R15,R5
    00000424 7201                   ADD         #1,R2
    00000426 2E22                   MOV.L       R2,@R14
    00000428 B3A4                   BSR         _translateBack
    0000042A 64C0                   MOV.B       @R12,R4
    0000042C 2F06                   MOV.L       R0,@-R15
    0000042E 65F3                   MOV         R15,R5
    00000430 7504                   ADD         #4,R5
    00000432 B39F                   BSR         _translateBack
    00000434 64D0                   MOV.B       @R13,R4
    00000436 6403                   MOV         R0,R4
    00000438 7401                   ADD         #1,R4
    0000043A B1BF                   BSR         _removeCoin1
    0000043C 65F6                   MOV.L       @R15+,R5
         logic.c   247                                                            move(RIGHT);
         logic.c   248                                                            break;
         logic.c   249                                                    case 3:
         logic.c   250                                                            // Coin at the next pos.
         logic.c   251                                                            score++;
         logic.c   252                                                            removeCoin1(translateBack(xPlayer, &off) + 1, tran
                         +slateBack(yPlayer + 8, &off));
         logic.c   253                                                            move(RIGHT);
         logic.c   254                                                            break;
    0000043E              L857:                             
    0000043E B0A7                   BSR         _move
    00000440 E402                   MOV         #2,R4
    00000442 A075                   BRA         L702
    00000444 0009                   NOP
    00000446              L623:                            ; case label 
    00000446 63E2                   MOV.L       @R14,R3
    00000448 7301                   ADD         #1,R3
    0000044A A00F                   BRA         L559
    0000044C 2E32                   MOV.L       R3,@R14
    0000044E              L624:                            ; case label 
         logic.c   255                                                    case 4:
         logic.c   256                                                            score += 2;
         logic.c   257                                                            removeCoin1(translateBack(xPlayer, &off) + 1, tran




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +slateBack(yPlayer, &off));
    0000044E 65F3                   MOV         R15,R5
    00000450 63E2                   MOV.L       @R14,R3
    00000452 7302                   ADD         #2,R3
    00000454 2E32                   MOV.L       R3,@R14
    00000456 B38D                   BSR         _translateBack
    00000458 64C0                   MOV.B       @R12,R4
    0000045A 2F06                   MOV.L       R0,@-R15
    0000045C 65F3                   MOV         R15,R5
    0000045E 7504                   ADD         #4,R5
    00000460 B388                   BSR         _translateBack
    00000462 64D0                   MOV.B       @R13,R4
    00000464 6403                   MOV         R0,R4
    00000466 7401                   ADD         #1,R4
    00000468 B1A8                   BSR         _removeCoin1
    0000046A 65F6                   MOV.L       @R15+,R5
    0000046C              L559:
         logic.c   258                                                            removeCoin1(translateBack(xPlayer, &off) + 1, tran
                         +slateBack(yPlayer + 8, &off));
    0000046C 64C0                   MOV.B       @R12,R4
    0000046E 65F3                   MOV         R15,R5
    00000470 B380                   BSR         _translateBack
    00000472 7408                   ADD         #8,R4
    00000474 2F06                   MOV.L       R0,@-R15
    00000476 65F3                   MOV         R15,R5
    00000478 7504                   ADD         #4,R5
    0000047A B37B                   BSR         _translateBack
    0000047C 64D0                   MOV.B       @R13,R4
    0000047E 6403                   MOV         R0,R4
    00000480 7401                   ADD         #1,R4
    00000482 B19B                   BSR         _removeCoin1
    00000484 65F6                   MOV.L       @R15+,R5
         logic.c   259                                                            move(RIGHT);
    00000486 B083                   BSR         _move
    00000488 E402                   MOV         #2,R4
         logic.c   260                                                            break;
         logic.c   261                                            }
         logic.c   262                                            break;
    0000048A A051                   BRA         L702
    0000048C 0009                   NOP
    0000048E              L625:                            ; case label 
         logic.c   263                                    case LEFT:
         logic.c   264                                            // Left
         logic.c   265                                            dirPlayer = 2;
    0000048E E502                   MOV         #2,R5
    00000490 2450                   MOV.B       R5,@R4
         logic.c   266                                            res = colPlayerHori1(LEFT);
    00000492 B1DD                   BSR         _colPlayerHori1
    00000494 E403                   MOV         #3,R4
         logic.c   267                                            switch(res) {
    00000496 8800                   CMP/EQ      #0,R0
    00000498 8D18                   BT/S        L858
    0000049A 6403                   MOV         R0,R4
    0000049C 8801                   CMP/EQ      #1,R0
    0000049E 8947                   BT          L702
    000004A0 8802                   CMP/EQ      #2,R0
    000004A2 8905                   BT          L628




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004A4 8803                   CMP/EQ      #3,R0
    000004A6 8915                   BT          L629
    000004A8 8804                   CMP/EQ      #4,R0
    000004AA 8917                   BT          L630
    000004AC A040                   BRA         L702
    000004AE 0009                   NOP
    000004B0              L628:                            ; case label 
         logic.c   268                                                    case 0:
         logic.c   269                                                            move(LEFT);
         logic.c   270                                                            break;
         logic.c   271                                                    case 1:
         logic.c   272                                                            // Box or Block
         logic.c   273                                                            break;
         logic.c   274                                                    case 2:
         logic.c   275                                                            // Coin
         logic.c   276                                                            score++;
    000004B0 63E2                   MOV.L       @R14,R3
         logic.c   277                                                            removeCoin1(translateBack(xPlayer, &off), translat
                         +eBack(yPlayer, &off));
    000004B2 65F3                   MOV         R15,R5
    000004B4 7301                   ADD         #1,R3
    000004B6 2E32                   MOV.L       R3,@R14
    000004B8 B35C                   BSR         _translateBack
    000004BA 64C0                   MOV.B       @R12,R4
    000004BC 2F06                   MOV.L       R0,@-R15
    000004BE 65F3                   MOV         R15,R5
    000004C0 7504                   ADD         #4,R5
    000004C2 B357                   BSR         _translateBack
    000004C4 64D0                   MOV.B       @R13,R4
    000004C6 6403                   MOV         R0,R4
    000004C8 B178                   BSR         _removeCoin1
    000004CA 65F6                   MOV.L       @R15+,R5
         logic.c   278                                                            move(LEFT);
         logic.c   279                                                            break;
         logic.c   280                                                    case 3:
         logic.c   281                                                            // Coin at the next pos.
         logic.c   282                                                            score++;
         logic.c   283                                                            removeCoin1(translateBack(xPlayer, &off), translat
                         +eBack(yPlayer + 8, &off));
         logic.c   284                                                            move(LEFT);
         logic.c   285                                                            break;
    000004CC              L858:                             
    000004CC B060                   BSR         _move
    000004CE E403                   MOV         #3,R4
    000004D0 A02E                   BRA         L702
    000004D2 0009                   NOP
    000004D4              L629:                            ; case label 
    000004D4 62E2                   MOV.L       @R14,R2
    000004D6 7201                   ADD         #1,R2
    000004D8 A00E                   BRA         L556
    000004DA 2E22                   MOV.L       R2,@R14
    000004DC              L630:                            ; case label 
         logic.c   286                                                    case 4:
         logic.c   287                                                            score += 2;
    000004DC 62E2                   MOV.L       @R14,R2
         logic.c   288                                                            removeCoin1(translateBack(xPlayer, &off), translat
                         +eBack(yPlayer, &off));




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004DE 65F3                   MOV         R15,R5
    000004E0 7202                   ADD         #2,R2
    000004E2 2E22                   MOV.L       R2,@R14
    000004E4 B346                   BSR         _translateBack
    000004E6 64C0                   MOV.B       @R12,R4
    000004E8 2F06                   MOV.L       R0,@-R15
    000004EA 65F3                   MOV         R15,R5
    000004EC 7504                   ADD         #4,R5
    000004EE B341                   BSR         _translateBack
    000004F0 64D0                   MOV.B       @R13,R4
    000004F2 6403                   MOV         R0,R4
    000004F4 B162                   BSR         _removeCoin1
    000004F6 65F6                   MOV.L       @R15+,R5
    000004F8              L556:
         logic.c   289                                                            removeCoin1(translateBack(xPlayer, &off), translat
                         +eBack(yPlayer + 8, &off));
    000004F8 64C0                   MOV.B       @R12,R4
    000004FA 65F3                   MOV         R15,R5
    000004FC B33A                   BSR         _translateBack
    000004FE 7408                   ADD         #8,R4
    00000500 2F06                   MOV.L       R0,@-R15
    00000502 65F3                   MOV         R15,R5
    00000504 7504                   ADD         #4,R5
    00000506 B335                   BSR         _translateBack
    00000508 64D0                   MOV.B       @R13,R4
    0000050A 6403                   MOV         R0,R4
    0000050C B156                   BSR         _removeCoin1
    0000050E 65F6                   MOV.L       @R15+,R5
         logic.c   290                                                            move(LEFT);
    00000510 B03E                   BSR         _move
    00000512 E403                   MOV         #3,R4
         logic.c   291                                                            break;
         logic.c   292                                            }
         logic.c   293                                            break;
    00000514 A00C                   BRA         L702
    00000516 0009                   NOP
    00000518              L632:                            ; case label 
         logic.c   294                                    case 4:
         logic.c   295                                            // Down
         logic.c   296                                            break;
         logic.c   297                                    case 0:
         logic.c   298                                            // Nothing
         logic.c   299                                            dirPlayer = 0;
         logic.c   300                                            break;
    00000518 A00A                   BRA         L702
    0000051A 24B0                   MOV.B       R11,@R4
    0000051C              L633:                            ; case label 
         logic.c   301                                    case 1:
         logic.c   302                                            // Jump only if we have something solid under us...
         logic.c   303                                            if (isJumping == 0) {
    0000051C DE19                   MOV.L       L865+42,R14; _isJumping
    0000051E 63E2                   MOV.L       @R14,R3
    00000520 2338                   TST         R3,R3
    00000522 8B05                   BF          L702
         logic.c   304                                                    if (colPlayerVert1(BELOW) == 1) {
    00000524 B249                   BSR         _colPlayerVert1
    00000526 E400                   MOV         #0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000528 8801                   CMP/EQ      #1,R0
    0000052A 8B01                   BF          L702
         logic.c   305                                                            isJumping = JUMPHEIGHT;
    0000052C E412                   MOV         #18,R4
    0000052E 2E42                   MOV.L       R4,@R14
         logic.c   306                                                    }
         logic.c   307                                            }
         logic.c   308                                            break;
         logic.c   309    
         logic.c   310                                    default:
         logic.c   311                                            break;
    00000530              L702:                             
         logic.c   312                            }
         logic.c   313                            gravity1();
    00000530 B33B                   BSR         _gravity1
    00000532 0009                   NOP
         logic.c   314                            clear();
    00000534 DE14                   MOV.L       L865+46,R14; _clear
    00000536 4E0B                   JSR         @R14
    00000538 0009                   NOP
         logic.c   315                            DrawLevel1();
    0000053A BE78                   BSR         _DrawLevel1
    0000053C 0009                   NOP
         logic.c   316                            drawHUD();
    0000053E B04D                   BSR         _drawHUD
    00000540 0009                   NOP
         logic.c   317                            draw();
    00000542 DE12                   MOV.L       L865+50,R14; _draw
    00000544 4E0B                   JSR         @R14
    00000546 0009                   NOP
    00000548 AF27                   BRA         L697
    0000054A 0009                   NOP
    0000054C              L703:                             
         logic.c   318                    }
         logic.c   319            }
         logic.c   320    }
    0000054C 7F04                   ADD         #4,R15
    0000054E 4F26                   LDS.L       @R15+,PR
    00000550 6BF6                   MOV.L       @R15+,R11
    00000552 6CF6                   MOV.L       @R15+,R12
    00000554 6DF6                   MOV.L       @R15+,R13
    00000556 000B                   RTS
    00000558 6EF6                   MOV.L       @R15+,R14
    0000055A              L865:                             
    0000055A 0000                   .DATA.W     0
    0000055C <00000000>             .DATA.L     _timer_1
    00000560 <00000000>             .DATA.L     _SetTimer
    00000564 <00000000>             .DATA.L     _hp
    00000568 <00000000>             .DATA.L     _timer1
    0000056C <00000000>             .DATA.L     _timer1Flag
    00000570 <00000000>             .DATA.L     _getButtons
    00000574 <00000000>             .DATA.L     _dirPlayer
    00000578 <00000000>             .DATA.L     _yPlayer
    0000057C <00000000>             .DATA.L     _xPlayer
    00000580 <00000000>             .DATA.L     _score
    00000584 <00000000>             .DATA.L     _isJumping
    00000588 <00000000>             .DATA.L     _clear




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000058C <00000000>             .DATA.L     _draw
         logic.c   321    
         logic.c   322    int move(int dir) {
    00000590              _move:                           ; function: move
                                                           ; frame size=0
    00000590 D632                   MOV.L       L871+2,R6  ; _viewOffset
    00000592 6043                   MOV         R4,R0
    00000594 D532                   MOV.L       L871+6,R5  ; _xPlayer
    00000596 8803                   CMP/EQ      #3,R0
    00000598 8F11                   BF/S        L708
    0000059A 6750                   MOV.B       @R5,R7
         logic.c   323            if (dir == LEFT) {
         logic.c   324                    if (xPlayer > 8) {
    0000059C E208                   MOV         #8,R2
    0000059E 3727                   CMP/GT      R2,R7
    000005A0 8B02                   BF          L709
         logic.c   325                            xPlayer--;
    000005A2 6150                   MOV.B       @R5,R1
    000005A4 A010                   BRA         L859
    000005A6 71FF                   ADD         #-1,R1
    000005A8              L709:                             
         logic.c   326                    } else {
         logic.c   327                            if (viewOffset > 0) {
    000005A8 6362                   MOV.L       @R6,R3
    000005AA E000                   MOV         #0,R0
    000005AC 3306                   CMP/HI      R0,R3
    000005AE 8B13                   BF          L712
         logic.c   328                                    viewOffset--;
    000005B0 6362                   MOV.L       @R6,R3
    000005B2 73FF                   ADD         #-1,R3
    000005B4 2632                   MOV.L       R3,@R6
         logic.c   329                                    xPlayer += 8;
    000005B6 6150                   MOV.B       @R5,R1
    000005B8 312C                   ADD         R2,R1
    000005BA A00D                   BRA         L712
    000005BC 2510                   MOV.B       R1,@R5
    000005BE              L708:                             
         logic.c   330                            }
         logic.c   331                    }
         logic.c   332            } else {
         logic.c   333                    if (xPlayer < 120) {
    000005BE E278                   MOV         #120,R2
    000005C0 3723                   CMP/GE      R2,R7
    000005C2 8903                   BT          L713
         logic.c   334                            xPlayer++;
    000005C4 6150                   MOV.B       @R5,R1
    000005C6 7101                   ADD         #1,R1
    000005C8              L859:                             
    000005C8 A006                   BRA         L712
    000005CA 2510                   MOV.B       R1,@R5
    000005CC              L713:                             
         logic.c   335                    } else {
         logic.c   336                            viewOffset++;
    000005CC 6062                   MOV.L       @R6,R0
    000005CE 7001                   ADD         #1,R0
    000005D0 2602                   MOV.L       R0,@R6
         logic.c   337                            xPlayer -= 8;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005D2 6350                   MOV.B       @R5,R3
    000005D4 73F8                   ADD         #-8,R3
    000005D6 2530                   MOV.B       R3,@R5
    000005D8              L712:                             
         logic.c   338                    }
         logic.c   339            }
         logic.c   340    }
    000005D8 000B                   RTS
    000005DA 0009                   NOP
         logic.c   341    
         logic.c   342    int drawHUD() {
    000005DC              _drawHUD:                        ; function: drawHUD
                                                           ; frame size=8
    000005DC 2FE6                   MOV.L       R14,@-R15
         logic.c   343            locate(1, 1);
    000005DE E501                   MOV         #1,R5
    000005E0 D320                   MOV.L       L871+10,R3 ; _locate
    000005E2 4F22                   STS.L       PR,@-R15
    000005E4 430B                   JSR         @R3
    000005E6 6453                   MOV         R5,R4
         logic.c   344            intToString(hp);
    000005E8 D21F                   MOV.L       L871+14,R2 ; _hp
    000005EA B017                   BSR         _intToString
    000005EC 6422                   MOV.L       @R2,R4
         logic.c   345            Print((unsigned char*)"HP:");
    000005EE DE1F                   MOV.L       L871+18,R14; _Print
    000005F0 D41F                   MOV.L       L871+22,R4 ; L415
    000005F2 4E0B                   JSR         @R14
    000005F4 0009                   NOP
         logic.c   346            Print(HUDstring);
    000005F6 D41F                   MOV.L       L871+26,R4 ; _HUDstring
    000005F8 4E0B                   JSR         @R14
    000005FA 0009                   NOP
         logic.c   347            locate(13, 1);
    000005FC D219                   MOV.L       L871+10,R2 ; _locate
    000005FE E501                   MOV         #1,R5
    00000600 420B                   JSR         @R2
    00000602 E40D                   MOV         #13,R4
         logic.c   348            Print((unsigned char*)"SCORE:");
    00000604 D41C                   MOV.L       L871+30,R4 ; L416
    00000606 4E0B                   JSR         @R14
    00000608 0009                   NOP
         logic.c   349            intToString(score);
    0000060A D31C                   MOV.L       L871+34,R3 ; _score
    0000060C B006                   BSR         _intToString
    0000060E 6432                   MOV.L       @R3,R4
         logic.c   350            Print(HUDstring);
    00000610 D418                   MOV.L       L871+26,R4 ; _HUDstring
    00000612 4E0B                   JSR         @R14
    00000614 0009                   NOP
         logic.c   351    }
    00000616 4F26                   LDS.L       @R15+,PR
    00000618 000B                   RTS
    0000061A 6EF6                   MOV.L       @R15+,R14
         logic.c   352    
         logic.c   353    int intToString(int a) {
    0000061C              _intToString:                    ; function: intToString




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=0
    0000061C D515                   MOV.L       L871+26,R5 ; _HUDstring
    0000061E 6653                   MOV         R5,R6
    00000620 6053                   MOV         R5,R0
    00000622 7003                   ADD         #3,R0
         logic.c   354            int i;
         logic.c   355            for (i = 0; i < 3; i++) {
    00000624 A002                   BRA         L715
    00000626 E730                   MOV         #48,R7
    00000628              L716:                             
         logic.c   356                    HUDstring[i] = '0';
    00000628 2670                   MOV.B       R7,@R6
    0000062A 7601                   ADD         #1,R6
    0000062C              L715:                             
    0000062C 3602                   CMP/HS      R0,R6
    0000062E 8BFB                   BF          L716
         logic.c   357            }
         logic.c   358            HUDstring[3] = '\0';
    00000630 E000                   MOV         #0,R0
    00000632 E60A                   MOV         #10,R6
    00000634 8053                   MOV.B       R0,@(3,R5)
    00000636 3463                   CMP/GE      R6,R4
    00000638 8D04                   BT/S        L717
    0000063A 6753                   MOV         R5,R7
         logic.c   359            if (a < 10) {
         logic.c   360                    HUDstring[2] += a;
    0000063C 8472                   MOV.B       @(2,R7),R0
    0000063E 304C                   ADD         R4,R0
    00000640 A009                   BRA         L560
    00000642 8072                   MOV.B       R0,@(2,R7)
    00000644              L717:                             
         logic.c   361                    return 0;
         logic.c   362            }
         logic.c   363            if (a > 999) {
    00000644 9209                   MOV.W       L871,R2    ; H'03E7
    00000646 3427                   CMP/GT      R2,R4
    00000648 8B1A                   BF          L719
         logic.c   364                    HUDstring[0] = 'B';
    0000064A E142                   MOV         #66,R1
    0000064C 2710                   MOV.B       R1,@R7
         logic.c   365                    HUDstring[1] = 'I';
    0000064E E049                   MOV         #73,R0
    00000650 8051                   MOV.B       R0,@(1,R5)
         logic.c   366                    HUDstring[2] = 'G';
    00000652 E047                   MOV         #71,R0
    00000654 8052                   MOV.B       R0,@(2,R5)
    00000656              L560:
         logic.c   367                    return 0;
    00000656 000B                   RTS
    00000658 E000                   MOV         #0,R0
    0000065A              L871:                             
    0000065A 03E7                   .DATA.W     H'03E7
    0000065C <00000000>             .DATA.L     _viewOffset
    00000660 <00000000>             .DATA.L     _xPlayer
    00000664 <00000000>             .DATA.L     _locate
    00000668 <00000000>             .DATA.L     _hp
    0000066C <00000000>             .DATA.L     _Print




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000670 <00000000>             .DATA.L     L415
    00000674 <00000000>             .DATA.L     _HUDstring
    00000678 <00000000>             .DATA.L     L416
    0000067C <00000000>             .DATA.L     _score
    00000680              L719:                             
    00000680 6073                   MOV         R7,R0
         logic.c   368            }
         logic.c   369            while (a >= 100) {
    00000682 E764                   MOV         #100,R7
    00000684 3473                   CMP/GE      R7,R4
    00000686 8B05                   BF          L720
    00000688              L721:                             
         logic.c   370                    HUDstring[0]++;
    00000688 6200                   MOV.B       @R0,R2
         logic.c   371                    a -= 100;
    0000068A 749C                   ADD         #-100,R4
    0000068C 7201                   ADD         #1,R2
    0000068E 3473                   CMP/GE      R7,R4
    00000690 8DFA                   BT/S        L721
    00000692 2020                   MOV.B       R2,@R0
    00000694              L720:                             
    00000694 6753                   MOV         R5,R7
         logic.c   372            }
         logic.c   373            while (a >= 10) {
    00000696 3463                   CMP/GE      R6,R4
    00000698 8F06                   BF/S        L722
    0000069A 7701                   ADD         #1,R7
    0000069C              L723:                             
         logic.c   374                    HUDstring[1]++;
    0000069C 6370                   MOV.B       @R7,R3
         logic.c   375                    a -= 10;
    0000069E 74F6                   ADD         #-10,R4
    000006A0 7301                   ADD         #1,R3
    000006A2 3463                   CMP/GE      R6,R4
    000006A4 8DFA                   BT/S        L723
    000006A6 2730                   MOV.B       R3,@R7
    000006A8              L722:                             
    000006A8 6653                   MOV         R5,R6
         logic.c   376            }
         logic.c   377            while (a >= 1) {
    000006AA E501                   MOV         #1,R5
    000006AC 3453                   CMP/GE      R5,R4
    000006AE 8F06                   BF/S        L724
    000006B0 7602                   ADD         #2,R6
    000006B2              L725:                             
         logic.c   378                    HUDstring[2]++;
         logic.c   379                    a -= 1;
    000006B2 74FF                   ADD         #-1,R4
    000006B4 6260                   MOV.B       @R6,R2
    000006B6 3453                   CMP/GE      R5,R4
    000006B8 7201                   ADD         #1,R2
    000006BA 8DFA                   BT/S        L725
    000006BC 2620                   MOV.B       R2,@R6
    000006BE              L724:                             
         logic.c   380            }
         logic.c   381            return 1;
    000006BE E001                   MOV         #1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c   382    }
    000006C0              L718:                             
    000006C0 000B                   RTS
    000006C2 0009                   NOP
         logic.c   383    
         logic.c   384    char getPixel(int x, int y) {
    000006C4              _getPixel:                       ; function: getPixel
                                                           ; frame size=4
    000006C4 4F22                   STS.L       PR,@-R15
         logic.c   385            return (char)Bdisp_GetPoint_VRAM(x, y);
    000006C6 D374                   MOV.L       L872+2,R3  ; _Bdisp_GetPoint_VRAM
    000006C8 430B                   JSR         @R3
    000006CA 0009                   NOP
         logic.c   386    }
    000006CC 4F26                   LDS.L       @R15+,PR
    000006CE 000B                   RTS
    000006D0 0009                   NOP
         logic.c   387    
         logic.c   388    int isBlock1(char x, char y) {
    000006D2              _isBlock1:                       ; function: isBlock1
                                                           ; frame size=28
    000006D2 2FE6                   MOV.L       R14,@-R15
    000006D4 2FD6                   MOV.L       R13,@-R15
    000006D6 6D53                   MOV         R5,R13
    000006D8 2FC6                   MOV.L       R12,@-R15
    000006DA 2FB6                   MOV.L       R11,@-R15
    000006DC 2FA6                   MOV.L       R10,@-R15
    000006DE 4F22                   STS.L       PR,@-R15
         logic.c   389            // is there a Block at (x|y)?
         logic.c   390            int flag = 0;
         logic.c   391            int i;
         logic.c   392            for (i = 0; i < getsizeBlock1(y); i++) {
    000006E0 DA6E                   MOV.L       L872+6,R10 ; _getsizeBlock1
    000006E2 7FFC                   ADD         #-4,R15
    000006E4 DB6E                   MOV.L       L872+10,R11; _viewOffset
    000006E6 2F40                   MOV.B       R4,@R15
    000006E8 E400                   MOV         #0,R4
    000006EA 6C43                   MOV         R4,R12
    000006EC A00B                   BRA         L727
    000006EE 6E43                   MOV         R4,R14
    000006F0              L728:                             
         logic.c   393                    if (getBlock1(i, y) == x + viewOffset) {
    000006F0 65D3                   MOV         R13,R5
    000006F2 BC85                   BSR         _getBlock1
    000006F4 64E3                   MOV         R14,R4
    000006F6 600E                   EXTS.B      R0,R0
    000006F8 63F0                   MOV.B       @R15,R3
    000006FA 62B2                   MOV.L       @R11,R2
    000006FC 332C                   ADD         R2,R3
    000006FE 3030                   CMP/EQ      R3,R0
    00000700 8F01                   BF/S        L729
    00000702 7E01                   ADD         #1,R14
         logic.c   394                            flag++;
    00000704 7C01                   ADD         #1,R12
    00000706              L729:                             
    00000706              L727:                             
    00000706 4A0B                   JSR         @R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000708 64D3                   MOV         R13,R4
    0000070A 3E03                   CMP/GE      R0,R14
    0000070C 8BF0                   BF          L728
         logic.c   395                    }
         logic.c   396            }
         logic.c   397            return flag;
    0000070E 60C3                   MOV         R12,R0
         logic.c   398    }
    00000710 7F04                   ADD         #4,R15
    00000712 4F26                   LDS.L       @R15+,PR
    00000714 6AF6                   MOV.L       @R15+,R10
    00000716 6BF6                   MOV.L       @R15+,R11
    00000718 6CF6                   MOV.L       @R15+,R12
    0000071A 6DF6                   MOV.L       @R15+,R13
    0000071C 000B                   RTS
    0000071E 6EF6                   MOV.L       @R15+,R14
         logic.c   399    
         logic.c   400    int isBox1(char x, char y) {
    00000720              _isBox1:                         ; function: isBox1
                                                           ; frame size=28
    00000720 2FE6                   MOV.L       R14,@-R15
    00000722 2FD6                   MOV.L       R13,@-R15
    00000724 2FC6                   MOV.L       R12,@-R15
    00000726 6D53                   MOV         R5,R13
    00000728 2FB6                   MOV.L       R11,@-R15
    0000072A 2FA6                   MOV.L       R10,@-R15
    0000072C 4F22                   STS.L       PR,@-R15
    0000072E 7FFC                   ADD         #-4,R15
         logic.c   401            // is there a Box at (x|y)?
         logic.c   402            int flag = 0;
         logic.c   403            int i;
         logic.c   404            for (i = 0; i < getsizeBox1(y); i++) {
    00000730 DA5C                   MOV.L       L872+14,R10; _getsizeBox1
    00000732 2F40                   MOV.B       R4,@R15
    00000734 DB5A                   MOV.L       L872+10,R11; _viewOffset
    00000736 E400                   MOV         #0,R4
    00000738 6C43                   MOV         R4,R12
    0000073A A00B                   BRA         L731
    0000073C 6E43                   MOV         R4,R14
    0000073E              L732:                             
         logic.c   405                    if (getBox1(i, y) == x + viewOffset) {
    0000073E 65D3                   MOV         R13,R5
    00000740 BC8D                   BSR         _getBox1
    00000742 64E3                   MOV         R14,R4
    00000744 63F0                   MOV.B       @R15,R3
    00000746 600E                   EXTS.B      R0,R0
    00000748 62B2                   MOV.L       @R11,R2
    0000074A 332C                   ADD         R2,R3
    0000074C 3030                   CMP/EQ      R3,R0
    0000074E 8F01                   BF/S        L733
    00000750 7E01                   ADD         #1,R14
         logic.c   406                            flag++;
    00000752 7C01                   ADD         #1,R12
    00000754              L733:                             
    00000754              L731:                             
    00000754 4A0B                   JSR         @R10
    00000756 64D3                   MOV         R13,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000758 3E03                   CMP/GE      R0,R14
    0000075A 8BF0                   BF          L732
         logic.c   407                    }
         logic.c   408            }
         logic.c   409            return flag;
    0000075C 60C3                   MOV         R12,R0
         logic.c   410    }
    0000075E 7F04                   ADD         #4,R15
    00000760 4F26                   LDS.L       @R15+,PR
    00000762 6AF6                   MOV.L       @R15+,R10
    00000764 6BF6                   MOV.L       @R15+,R11
    00000766 6CF6                   MOV.L       @R15+,R12
    00000768 6DF6                   MOV.L       @R15+,R13
    0000076A 000B                   RTS
    0000076C 6EF6                   MOV.L       @R15+,R14
         logic.c   411    
         logic.c   412    int isCoin1(char x, char y) {
    0000076E              _isCoin1:                        ; function: isCoin1
                                                           ; frame size=28
    0000076E 2FE6                   MOV.L       R14,@-R15
    00000770 2FD6                   MOV.L       R13,@-R15
    00000772 6D53                   MOV         R5,R13
    00000774 2FC6                   MOV.L       R12,@-R15
    00000776 2FB6                   MOV.L       R11,@-R15
    00000778 2FA6                   MOV.L       R10,@-R15
    0000077A 4F22                   STS.L       PR,@-R15
         logic.c   413            // is there a Block at (x|y)?
         logic.c   414            int flag = 0;
         logic.c   415            int i;
         logic.c   416            for (i = 0; i < getsizeCoin1(y); i++) {
    0000077C DA4A                   MOV.L       L872+18,R10; _getsizeCoin1
    0000077E 7FFC                   ADD         #-4,R15
    00000780 DB47                   MOV.L       L872+10,R11; _viewOffset
    00000782 2F40                   MOV.B       R4,@R15
    00000784 E400                   MOV         #0,R4
    00000786 6C43                   MOV         R4,R12
    00000788 A00B                   BRA         L735
    0000078A 6E43                   MOV         R4,R14
    0000078C              L736:                             
         logic.c   417                    if (getCoin1(i, y) == x + viewOffset) {
    0000078C 65D3                   MOV         R13,R5
    0000078E BC95                   BSR         _getCoin1
    00000790 64E3                   MOV         R14,R4
    00000792 600E                   EXTS.B      R0,R0
    00000794 63F0                   MOV.B       @R15,R3
    00000796 62B2                   MOV.L       @R11,R2
    00000798 332C                   ADD         R2,R3
    0000079A 3030                   CMP/EQ      R3,R0
    0000079C 8F01                   BF/S        L737
    0000079E 7E01                   ADD         #1,R14
         logic.c   418                            flag++;
    000007A0 7C01                   ADD         #1,R12
    000007A2              L737:                             
    000007A2              L735:                             
    000007A2 4A0B                   JSR         @R10
    000007A4 64D3                   MOV         R13,R4
    000007A6 3E03                   CMP/GE      R0,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007A8 8BF0                   BF          L736
         logic.c   419                    }
         logic.c   420            }
         logic.c   421            return flag;
    000007AA 60C3                   MOV         R12,R0
         logic.c   422    }
    000007AC 7F04                   ADD         #4,R15
    000007AE 4F26                   LDS.L       @R15+,PR
    000007B0 6AF6                   MOV.L       @R15+,R10
    000007B2 6BF6                   MOV.L       @R15+,R11
    000007B4 6CF6                   MOV.L       @R15+,R12
    000007B6 6DF6                   MOV.L       @R15+,R13
    000007B8 000B                   RTS
    000007BA 6EF6                   MOV.L       @R15+,R14
         logic.c   423    
         logic.c   424    int removeCoin1(char x, char y) {
    000007BC              _removeCoin1:                    ; function: removeCoin1
                                                           ; frame size=24
    000007BC 2FE6                   MOV.L       R14,@-R15
    000007BE 2FD6                   MOV.L       R13,@-R15
    000007C0 2FC6                   MOV.L       R12,@-R15
    000007C2 6D53                   MOV         R5,R13
    000007C4 2FB6                   MOV.L       R11,@-R15
    000007C6 4F22                   STS.L       PR,@-R15
         logic.c   425            int i;
         logic.c   426            for (i = 0; i < getsizeCoin1(y); i++) {
    000007C8 DB35                   MOV.L       L872+10,R11; _viewOffset
    000007CA 7FFC                   ADD         #-4,R15
    000007CC DC36                   MOV.L       L872+18,R12; _getsizeCoin1
    000007CE 2F40                   MOV.B       R4,@R15
    000007D0 A00E                   BRA         L739
    000007D2 EE00                   MOV         #0,R14
    000007D4              L740:                             
         logic.c   427                    if (getCoin1(i, y) == x + viewOffset) {
    000007D4 65D3                   MOV         R13,R5
    000007D6 BC71                   BSR         _getCoin1
    000007D8 64E3                   MOV         R14,R4
    000007DA 600E                   EXTS.B      R0,R0
    000007DC 63F0                   MOV.B       @R15,R3
    000007DE 62B2                   MOV.L       @R11,R2
    000007E0 332C                   ADD         R2,R3
    000007E2 3030                   CMP/EQ      R3,R0
    000007E4 8B03                   BF          L741
         logic.c   428                            setCoin1(i, y, -1);
    000007E6 E6FF                   MOV         #-1,R6
    000007E8 65D3                   MOV         R13,R5
    000007EA BC96                   BSR         _setCoin1
    000007EC 64E3                   MOV         R14,R4
    000007EE              L741:                             
    000007EE 7E01                   ADD         #1,R14
    000007F0              L739:                             
    000007F0 4C0B                   JSR         @R12
    000007F2 64D3                   MOV         R13,R4
    000007F4 3E03                   CMP/GE      R0,R14
    000007F6 8BED                   BF          L740
         logic.c   429                    }
         logic.c   430            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c   431    }
    000007F8 7F04                   ADD         #4,R15
    000007FA 4F26                   LDS.L       @R15+,PR
    000007FC 6BF6                   MOV.L       @R15+,R11
    000007FE 6CF6                   MOV.L       @R15+,R12
    00000800 6DF6                   MOV.L       @R15+,R13
    00000802 000B                   RTS
    00000804 6EF6                   MOV.L       @R15+,R14
         logic.c   432    
         logic.c   433    int removeBox1(char x, char y) {
    00000806              _removeBox1:                     ; function: removeBox1
                                                           ; frame size=24
    00000806 2FE6                   MOV.L       R14,@-R15
    00000808 2FD6                   MOV.L       R13,@-R15
    0000080A 6D53                   MOV         R5,R13
    0000080C 2FC6                   MOV.L       R12,@-R15
    0000080E 2FB6                   MOV.L       R11,@-R15
    00000810 4F22                   STS.L       PR,@-R15
    00000812 7FFC                   ADD         #-4,R15
         logic.c   434            int i;
         logic.c   435            for (i = 0; i < getsizeBox1(y); i++) {
    00000814 DB22                   MOV.L       L872+10,R11; _viewOffset
    00000816 2F40                   MOV.B       R4,@R15
    00000818 DC22                   MOV.L       L872+14,R12; _getsizeBox1
    0000081A A00E                   BRA         L742
    0000081C EE00                   MOV         #0,R14
    0000081E              L743:                             
         logic.c   436                    if (getBox1(i, y) == x + viewOffset) {
    0000081E 65D3                   MOV         R13,R5
    00000820 BC1D                   BSR         _getBox1
    00000822 64E3                   MOV         R14,R4
    00000824 63F0                   MOV.B       @R15,R3
    00000826 600E                   EXTS.B      R0,R0
    00000828 62B2                   MOV.L       @R11,R2
    0000082A 332C                   ADD         R2,R3
    0000082C 3030                   CMP/EQ      R3,R0
    0000082E 8B03                   BF          L744
         logic.c   437                            setBox1(i, y, -1);
    00000830 E6FF                   MOV         #-1,R6
    00000832 65D3                   MOV         R13,R5
    00000834 BCCE                   BSR         _setBox1
    00000836 64E3                   MOV         R14,R4
    00000838              L744:                             
    00000838 7E01                   ADD         #1,R14
    0000083A              L742:                             
    0000083A 4C0B                   JSR         @R12
    0000083C 64D3                   MOV         R13,R4
    0000083E 3E03                   CMP/GE      R0,R14
    00000840 8BED                   BF          L743
         logic.c   438                    }
         logic.c   439            }
         logic.c   440    }
    00000842 7F04                   ADD         #4,R15
    00000844 4F26                   LDS.L       @R15+,PR
    00000846 6BF6                   MOV.L       @R15+,R11
    00000848 6CF6                   MOV.L       @R15+,R12
    0000084A 6DF6                   MOV.L       @R15+,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000084C 000B                   RTS
    0000084E 6EF6                   MOV.L       @R15+,R14
         logic.c   441    
         logic.c   442    int colPlayerHori1(char dir) {
    00000850              _colPlayerHori1:                 ; function: colPlayerHori1
                                                           ; frame size=44
    00000850 2FE6                   MOV.L       R14,@-R15
         logic.c   443            // Check what is (dir) the player:
         logic.c   444            // 0 = Nothing
         logic.c   445            // 1 = Box / Block
         logic.c   446            // 2 = Coin
         logic.c   447            // 3 = Coin at next pos.
         logic.c   448            // 4 = Coin at both
         logic.c   449            // dir:
         logic.c   450            // use definitions RIGHT and LEFT
         logic.c   451            int i;
         logic.c   452            int flag = 0;
    00000852 E500                   MOV         #0,R5
         logic.c   453            char x = xPlayer;
    00000854 D215                   MOV.L       L872+22,R2 ; _xPlayer
    00000856 2FD6                   MOV.L       R13,@-R15
    00000858 2FC6                   MOV.L       R12,@-R15
    0000085A 2FB6                   MOV.L       R11,@-R15
    0000085C 2FA6                   MOV.L       R10,@-R15
    0000085E 6B4E                   EXTS.B      R4,R11
    00000860 2F96                   MOV.L       R9,@-R15
    00000862 6953                   MOV         R5,R9
    00000864 2F86                   MOV.L       R8,@-R15
         logic.c   454            char y = yPlayer;
         logic.c   455            char off;
         logic.c   456            int tmp;
         logic.c   457            char ret1 = 0;
    00000866 6A93                   MOV         R9,R10
    00000868 4F22                   STS.L       PR,@-R15
    0000086A 7FF4                   ADD         #-12,R15
    0000086C D810                   MOV.L       L872+26,R8 ; _yPlayer
    0000086E 6320                   MOV.B       @R2,R3
    00000870 2F30                   MOV.B       R3,@R15
    00000872 6080                   MOV.B       @R8,R0
    00000874 80F8                   MOV.B       R0,@(8,R15)
    00000876 60B3                   MOV         R11,R0
    00000878 8802                   CMP/EQ      #2,R0
    0000087A 8D04                   BT/S        L637
         logic.c   458            char ret2 = 0;
    0000087C 6D93                   MOV         R9,R13
    0000087E 8803                   CMP/EQ      #3,R0
    00000880 8904                   BT          L638
    00000882 A005                   BRA         L745
    00000884 0009                   NOP
    00000886              L637:                            ; case label 
         logic.c   459    
         logic.c   460            switch(dir) {
         logic.c   461                    case RIGHT:
         logic.c   462                            tmp = (xPlayer + 7);
    00000886 6EF0                   MOV.B       @R15,R14
         logic.c   463                            break;
    00000888 A002                   BRA         L745




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000088A 7E07                   ADD         #7,R14
    0000088C              L638:                            ; case label 
         logic.c   464                    case LEFT:
         logic.c   465                            tmp = (xPlayer - 1);
    0000088C 6EF0                   MOV.B       @R15,R14
    0000088E 7EFF                   ADD         #-1,R14
         logic.c   466                            break;
    00000890              L745:                             
         logic.c   467            }
         logic.c   468            for (i = yPlayer; i < (yPlayer + 8); i++) {
    00000890 84F8                   MOV.B       @(8,R15),R0
    00000892 A017                   BRA         L746
    00000894 6C03                   MOV         R0,R12
    00000896              L872:                             
    00000896 0000                   .DATA.W     0
    00000898 <00000000>             .DATA.L     _Bdisp_GetPoint_VRAM
    0000089C <00000000>             .DATA.L     _getsizeBlock1
    000008A0 <00000000>             .DATA.L     _viewOffset
    000008A4 <00000000>             .DATA.L     _getsizeBox1
    000008A8 <00000000>             .DATA.L     _getsizeCoin1
    000008AC <00000000>             .DATA.L     _xPlayer
    000008B0 <00000000>             .DATA.L     _yPlayer
    000008B4              L747:                             
         logic.c   469                    if (getPixel(tmp, i) == 1) {
    000008B4 65C3                   MOV         R12,R5
    000008B6 BF05                   BSR         _getPixel
    000008B8 64E3                   MOV         R14,R4
    000008BA 600E                   EXTS.B      R0,R0
    000008BC 8801                   CMP/EQ      #1,R0
    000008BE 8F01                   BF/S        L748
    000008C0 7C01                   ADD         #1,R12
         logic.c   470                            flag++;
    000008C2 7901                   ADD         #1,R9
    000008C4              L748:                             
    000008C4              L746:                             
    000008C4 6280                   MOV.B       @R8,R2
    000008C6 7208                   ADD         #8,R2
    000008C8 3C23                   CMP/GE      R2,R12
    000008CA 8BF3                   BF          L747
         logic.c   471                    }
         logic.c   472            }
         logic.c   473            if (flag == 0) {
    000008CC 2998                   TST         R9,R9
    000008CE 895B                   BT          L561
         logic.c   474                    // All the pixels right/left the player are white. There is nothing...
         logic.c   475                    return 0;
         logic.c   476            } else {
         logic.c   477                    // There are pixels activated... We check what it is...
         logic.c   478                    // First translate the pixelvalues to our block-values (127|63) => (15|7)
         logic.c   479                    x = translateBack(x, &off);
    000008D0 65F3                   MOV         R15,R5
    000008D2 7504                   ADD         #4,R5
    000008D4 B14E                   BSR         _translateBack
    000008D6 64F0                   MOV.B       @R15,R4
    000008D8 2F00                   MOV.B       R0,@R15
         logic.c   480                    y = translateBack(y, &off);
    000008DA 65F3                   MOV         R15,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008DC 84F8                   MOV.B       @(8,R15),R0
    000008DE 7504                   ADD         #4,R5
    000008E0 B148                   BSR         _translateBack
    000008E2 6403                   MOV         R0,R4
    000008E4 6CF0                   MOV.B       @R15,R12
    000008E6 6903                   MOV         R0,R9
    000008E8 60B3                   MOV         R11,R0
    000008EA 8802                   CMP/EQ      #2,R0
    000008EC 8903                   BT          L639
    000008EE 8803                   CMP/EQ      #3,R0
    000008F0 8904                   BT          L640
    000008F2 A005                   BRA         L752
    000008F4 0009                   NOP
    000008F6              L639:                            ; case label 
         logic.c   481                    
         logic.c   482                    switch (dir) {
         logic.c   483                            case RIGHT:
         logic.c   484                                    tmp = (x + 1);
    000008F6 6EC3                   MOV         R12,R14
         logic.c   485                                    break;
    000008F8 A002                   BRA         L752
    000008FA 7E01                   ADD         #1,R14
    000008FC              L640:                            ; case label 
         logic.c   486                            case LEFT:
         logic.c   487                                    tmp = x - 1;
    000008FC 6EC3                   MOV         R12,R14
    000008FE 7EFF                   ADD         #-1,R14
         logic.c   488                                    break;
    00000900              L752:                             
         logic.c   489                    }
         logic.c   490    
         logic.c   491                    if (off > 0) {
    00000900 84F4                   MOV.B       @(4,R15),R0
    00000902 4015                   CMP/PL      R0
    00000904 8B17                   BF          L753
    00000906 6893                   MOV         R9,R8
    00000908 7801                   ADD         #1,R8
    0000090A 6583                   MOV         R8,R5
    0000090C BEE1                   BSR         _isBlock1
    0000090E 64E3                   MOV         R14,R4
    00000910 2008                   TST         R0,R0
    00000912 8D01                   BT/S        L754
         logic.c   492                            // We are not on ONE block. Check the next also...
         logic.c   493                            if (isBlock1(tmp, y + 1) != 0) {
         logic.c   494                                    ret2 = 1;
         logic.c   495                            }
         logic.c   496                            if (dir == LEFT) {
    00000914 60B3                   MOV         R11,R0
    00000916 ED01                   MOV         #1,R13
    00000918              L754:                             
    00000918 8803                   CMP/EQ      #3,R0
    0000091A 8F01                   BF/S        L755
         logic.c   497                                    tmp = x;
         logic.c   498                            }
         logic.c   499                            if (isBox1(tmp, y + 1) != 0) {
    0000091C 6583                   MOV         R8,R5
    0000091E 6EC3                   MOV         R12,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000920              L755:                             
    00000920 BEFE                   BSR         _isBox1
    00000922 64E3                   MOV         R14,R4
    00000924 2008                   TST         R0,R0
    00000926 8D01                   BT/S        L756
         logic.c   500                                    ret2 = 1;
         logic.c   501                            }
         logic.c   502                            if (isCoin1(tmp, y + 1) != 0) {
    00000928 6583                   MOV         R8,R5
    0000092A ED01                   MOV         #1,R13
    0000092C              L756:                             
    0000092C BF1F                   BSR         _isCoin1
    0000092E 64E3                   MOV         R14,R4
    00000930 2008                   TST         R0,R0
    00000932 8900                   BT          L753
         logic.c   503                                    ret2 = 3;
    00000934 ED03                   MOV         #3,R13
    00000936              L753:                             
         logic.c   504                            }
         logic.c   505                    }
         logic.c   506                    if (dir == LEFT) {
    00000936 60B3                   MOV         R11,R0
    00000938 8803                   CMP/EQ      #3,R0
    0000093A 8F02                   BF/S        L758
         logic.c   507                            tmp = x - 1;
         logic.c   508                    }
         logic.c   509                    if (isBlock1(tmp, y) != 0) {
    0000093C 6593                   MOV         R9,R5
    0000093E 6EC3                   MOV         R12,R14
    00000940 7EFF                   ADD         #-1,R14
    00000942              L758:                             
    00000942 BEC6                   BSR         _isBlock1
    00000944 64E3                   MOV         R14,R4
    00000946 2008                   TST         R0,R0
    00000948 8D01                   BT/S        L759
         logic.c   510                            // There is a Block...
         logic.c   511                            ret1 = 1;
         logic.c   512                    }
         logic.c   513                    if (dir == LEFT) {
    0000094A 60B3                   MOV         R11,R0
    0000094C EA01                   MOV         #1,R10
    0000094E              L759:                             
    0000094E 8803                   CMP/EQ      #3,R0
    00000950 8F01                   BF/S        L760
         logic.c   514                            tmp = x;
         logic.c   515                    }
         logic.c   516                    if (isBox1(tmp, y) != 0) {
    00000952 6593                   MOV         R9,R5
    00000954 6EC3                   MOV         R12,R14
    00000956              L760:                             
    00000956 BEE3                   BSR         _isBox1
    00000958 64E3                   MOV         R14,R4
    0000095A 2008                   TST         R0,R0
    0000095C 8D01                   BT/S        L761
         logic.c   517                            // There is a Box...
         logic.c   518                            ret1 = 1;
         logic.c   519                    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c   520                    if (isCoin1(tmp, y) != 0) {
    0000095E 6593                   MOV         R9,R5
    00000960 EA01                   MOV         #1,R10
    00000962              L761:                             
    00000962 BF04                   BSR         _isCoin1
    00000964 64E3                   MOV         R14,R4
    00000966 2008                   TST         R0,R0
    00000968 8900                   BT          L762
         logic.c   521                            // Theres a Coin...
         logic.c   522                            ret1 = 2;
    0000096A EA02                   MOV         #2,R10
    0000096C              L762:                             
    0000096C 64AE                   EXTS.B      R10,R4
    0000096E 6043                   MOV         R4,R0
    00000970 8801                   CMP/EQ      #1,R0
    00000972 8902                   BT          L764
    00000974 60DE                   EXTS.B      R13,R0
    00000976 8801                   CMP/EQ      #1,R0
    00000978 8B01                   BF          L763
    0000097A              L764:                             
         logic.c   523                    }
         logic.c   524                    if ((ret1 == 1) || (ret2 == 1)) {
         logic.c   525                            return 1;
    0000097A A014                   BRA         L750
    0000097C E001                   MOV         #1,R0
    0000097E              L763:                             
         logic.c   526                    } else if ((ret1 == 0) && (ret2 == 0)) {
    0000097E 2448                   TST         R4,R4
    00000980 8B04                   BF          L766
    00000982 62DE                   EXTS.B      R13,R2
    00000984 2228                   TST         R2,R2
    00000986 8B01                   BF          L766
    00000988              L561:
         logic.c   527                            return 0;
    00000988 A00D                   BRA         L750
    0000098A E000                   MOV         #0,R0
    0000098C              L766:                             
         logic.c   528                    } else if ((ret1 == 2) && (ret2 == 3)) {
    0000098C 6043                   MOV         R4,R0
    0000098E 8802                   CMP/EQ      #2,R0
    00000990 8B04                   BF          L768
    00000992 60DE                   EXTS.B      R13,R0
    00000994 8803                   CMP/EQ      #3,R0
    00000996 8B01                   BF          L768
         logic.c   529                            return 4;
    00000998 A005                   BRA         L750
    0000099A E004                   MOV         #4,R0
    0000099C              L768:                             
         logic.c   530                    } else if (ret1 == 0) {
    0000099C 2448                   TST         R4,R4
    0000099E 8B01                   BF          L770
         logic.c   531                            return ret2;
    000009A0 A001                   BRA         L750
    000009A2 60DE                   EXTS.B      R13,R0
    000009A4              L770:                             
    000009A4 6043                   MOV         R4,R0
         logic.c   532                    } else {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c   533                            return ret1;
         logic.c   534                    }
         logic.c   535            }
         logic.c   536    }
    000009A6              L750:                             
    000009A6 7F0C                   ADD         #12,R15
    000009A8 4F26                   LDS.L       @R15+,PR
    000009AA 68F6                   MOV.L       @R15+,R8
    000009AC 69F6                   MOV.L       @R15+,R9
    000009AE 6AF6                   MOV.L       @R15+,R10
    000009B0 6BF6                   MOV.L       @R15+,R11
    000009B2 6CF6                   MOV.L       @R15+,R12
    000009B4 6DF6                   MOV.L       @R15+,R13
    000009B6 000B                   RTS
    000009B8 6EF6                   MOV.L       @R15+,R14
         logic.c   537    
         logic.c   538    int colPlayerVert1(char dir) {
    000009BA              _colPlayerVert1:                 ; function: colPlayerVert1
                                                           ; frame size=44
         logic.c   539            // Check what is (dir) the player:
         logic.c   540            // 0 = Nothing
         logic.c   541            // 1 = Block (+ Box if dir = BELOW)
         logic.c   542            // 2 = Coin
         logic.c   543            // 3 = Coin at next
         logic.c   544            // 4 = Box (if dir = ABOVE)
         logic.c   545            // 5 = Box at next position (if dir = ABOVE)
         logic.c   546            // 6 = two coins
         logic.c   547            // 7 = two boxes
         logic.c   548            // dir:
         logic.c   549            // use definitions BELOW and ABOVE
         logic.c   550            int i;
         logic.c   551            int flag = 0;
    000009BA E500                   MOV         #0,R5
         logic.c   552            char x = xPlayer;
         logic.c   553            char y = yPlayer;
    000009BC D123                   MOV.L       L873+4,R1  ; _yPlayer
    000009BE 2FE6                   MOV.L       R14,@-R15
    000009C0 2FD6                   MOV.L       R13,@-R15
    000009C2 2FC6                   MOV.L       R12,@-R15
    000009C4 2FB6                   MOV.L       R11,@-R15
    000009C6 6C4E                   EXTS.B      R4,R12
    000009C8 2FA6                   MOV.L       R10,@-R15
    000009CA 2F96                   MOV.L       R9,@-R15
    000009CC 2F86                   MOV.L       R8,@-R15
    000009CE 6853                   MOV         R5,R8
    000009D0 D91D                   MOV.L       L873,R9    ; _xPlayer
         logic.c   554            char off;
         logic.c   555            int tmp;
         logic.c   556            char ret1 = 0;
    000009D2 6B83                   MOV         R8,R11
    000009D4 4F22                   STS.L       PR,@-R15
    000009D6 7FF4                   ADD         #-12,R15
    000009D8 6090                   MOV.B       @R9,R0
    000009DA 80F8                   MOV.B       R0,@(8,R15)
    000009DC 6310                   MOV.B       @R1,R3
    000009DE 60C3                   MOV         R12,R0
    000009E0 2F30                   MOV.B       R3,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009E2 8800                   CMP/EQ      #0,R0
    000009E4 8D04                   BT/S        L641
         logic.c   557            char ret2 = 0;
    000009E6 6D83                   MOV         R8,R13
    000009E8 8801                   CMP/EQ      #1,R0
    000009EA 8904                   BT          L642
    000009EC A005                   BRA         L772
    000009EE 0009                   NOP
    000009F0              L641:                            ; case label 
         logic.c   558    
         logic.c   559            switch(dir) {
         logic.c   560                    case BELOW:
         logic.c   561                            tmp = (yPlayer + 8);
    000009F0 6EF0                   MOV.B       @R15,R14
         logic.c   562                            break;
    000009F2 A002                   BRA         L772
    000009F4 7E08                   ADD         #8,R14
    000009F6              L642:                            ; case label 
         logic.c   563                    case ABOVE:
         logic.c   564                            tmp = (yPlayer - 1);
    000009F6 6EF0                   MOV.B       @R15,R14
    000009F8 7EFF                   ADD         #-1,R14
         logic.c   565                            break;
    000009FA              L772:                             
         logic.c   566            }
         logic.c   567            for (i = xPlayer; i < (xPlayer + 7); i++) {
    000009FA 84F8                   MOV.B       @(8,R15),R0
    000009FC A008                   BRA         L773
    000009FE 6A03                   MOV         R0,R10
    00000A00              L774:                             
         logic.c   568                    if (getPixel(i, tmp) == 1) {
    00000A00 65E3                   MOV         R14,R5
    00000A02 BE5F                   BSR         _getPixel
    00000A04 64A3                   MOV         R10,R4
    00000A06 600E                   EXTS.B      R0,R0
    00000A08 8801                   CMP/EQ      #1,R0
    00000A0A 8F01                   BF/S        L775
    00000A0C 7A01                   ADD         #1,R10
         logic.c   569                            flag++;
    00000A0E 7801                   ADD         #1,R8
    00000A10              L775:                             
    00000A10              L773:                             
    00000A10 6290                   MOV.B       @R9,R2
    00000A12 7207                   ADD         #7,R2
    00000A14 3A23                   CMP/GE      R2,R10
    00000A16 8BF3                   BF          L774
         logic.c   570                    }
         logic.c   571            }
         logic.c   572            if (flag == 0) {
    00000A18 2888                   TST         R8,R8
    00000A1A 8963                   BT          L562
         logic.c   573                    // All the pixels under/above the player are white. There is nothing...
         logic.c   574                    return 0;
         logic.c   575            } else {
         logic.c   576                    // There are pixels activated under the player... We check what it is...
         logic.c   577                    // First translate the pixelvalues to our block-values (127|63) => (15|7)
         logic.c   578                    y = translateBack(y, &off);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A1C 65F3                   MOV         R15,R5
    00000A1E 7504                   ADD         #4,R5
    00000A20 B0A8                   BSR         _translateBack
    00000A22 64F0                   MOV.B       @R15,R4
    00000A24 2F00                   MOV.B       R0,@R15
         logic.c   579                    x = translateBack(x, &off);
    00000A26 65F3                   MOV         R15,R5
    00000A28 84F8                   MOV.B       @(8,R15),R0
    00000A2A 7504                   ADD         #4,R5
    00000A2C B0A2                   BSR         _translateBack
    00000A2E 6403                   MOV         R0,R4
    00000A30 6AF0                   MOV.B       @R15,R10
    00000A32 6903                   MOV         R0,R9
    00000A34 60C3                   MOV         R12,R0
    00000A36 8800                   CMP/EQ      #0,R0
    00000A38 8903                   BT          L643
    00000A3A 8801                   CMP/EQ      #1,R0
    00000A3C 8908                   BT          L644
    00000A3E A009                   BRA         L779
    00000A40 0009                   NOP
    00000A42              L643:                            ; case label 
         logic.c   580                    
         logic.c   581                    switch (dir) {
         logic.c   582                            case BELOW:
         logic.c   583                                    tmp = y + 1;
    00000A42 6EA3                   MOV         R10,R14
         logic.c   584                                    break;
    00000A44 A006                   BRA         L779
    00000A46 7E01                   ADD         #1,R14
    00000A48              L873:                             
    00000A48 <00000000>             .DATA.L     _xPlayer
    00000A4C <00000000>             .DATA.L     _yPlayer
    00000A50              L644:                            ; case label 
         logic.c   585                            case ABOVE:
         logic.c   586                                    tmp = y - 1;
    00000A50 6EA3                   MOV         R10,R14
    00000A52 7EFF                   ADD         #-1,R14
         logic.c   587                                    break;
    00000A54              L779:                             
         logic.c   588                    }
         logic.c   589    
         logic.c   590                    if (off > 1) { // Player is only 7px wide, but block has 8px, so we only
    00000A54 84F4                   MOV.B       @(4,R15),R0
    00000A56 E801                   MOV         #1,R8
    00000A58 3087                   CMP/GT      R8,R0
    00000A5A 8B1D                   BF          L780
    00000A5C 6293                   MOV         R9,R2
    00000A5E 7201                   ADD         #1,R2
    00000A60 2F20                   MOV.B       R2,@R15
    00000A62 65E3                   MOV         R14,R5
    00000A64 BE35                   BSR         _isBlock1
    00000A66 6423                   MOV         R2,R4
    00000A68 2008                   TST         R0,R0
    00000A6A 8D01                   BT/S        L781
         logic.c   591                                               // check the next block if we are at least 2 px off...
         logic.c   592    
         logic.c   593                            // We are not on ONE block. Check the next also...




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c   594                            if (isBlock1(x + 1, tmp) != 0) {
         logic.c   595                                    ret1 = 1;
         logic.c   596                            }
         logic.c   597                            if (dir == ABOVE) {
    00000A6C 60C3                   MOV         R12,R0
    00000A6E 6B83                   MOV         R8,R11
    00000A70              L781:                             
    00000A70 8801                   CMP/EQ      #1,R0
    00000A72 8B00                   BF          L782
         logic.c   598                                    tmp = y;
    00000A74 6EA3                   MOV         R10,R14
    00000A76              L782:                             
         logic.c   599                            }
         logic.c   600                            if (isBox1(x + 1, tmp) != 0) {
    00000A76 65E3                   MOV         R14,R5
    00000A78 BE52                   BSR         _isBox1
    00000A7A 64F0                   MOV.B       @R15,R4
    00000A7C 2008                   TST         R0,R0
    00000A7E 8905                   BT          L783
         logic.c   601                                    if (dir == ABOVE) {
    00000A80 60C3                   MOV         R12,R0
    00000A82 8801                   CMP/EQ      #1,R0
    00000A84 8B01                   BF          L784
         logic.c   602                                            ret1 = 5;
    00000A86 A001                   BRA         L783
    00000A88 EB05                   MOV         #5,R11
    00000A8A              L784:                             
         logic.c   603                                    } else {
         logic.c   604                                            ret1 = 1;
    00000A8A 6B83                   MOV         R8,R11
    00000A8C              L783:                             
         logic.c   605                                    }
         logic.c   606                            }
         logic.c   607                            if (isCoin1(x + 1, tmp) != 0) {
    00000A8C 65E3                   MOV         R14,R5
    00000A8E BE6E                   BSR         _isCoin1
    00000A90 64F0                   MOV.B       @R15,R4
    00000A92 2008                   TST         R0,R0
    00000A94 8900                   BT          L780
         logic.c   608                                    ret1 = 3;
    00000A96 EB03                   MOV         #3,R11
    00000A98              L780:                             
         logic.c   609                            }
         logic.c   610                    }
         logic.c   611                    if (dir == ABOVE) {
    00000A98 60C3                   MOV         R12,R0
    00000A9A 8801                   CMP/EQ      #1,R0
    00000A9C 8B01                   BF          L787
         logic.c   612                            tmp = y - 1;
    00000A9E 6EA3                   MOV         R10,R14
    00000AA0 7EFF                   ADD         #-1,R14
    00000AA2              L787:                             
         logic.c   613                    }
         logic.c   614                    if (isBlock1(x, tmp) != 0) {
    00000AA2 65E3                   MOV         R14,R5
    00000AA4 BE15                   BSR         _isBlock1
    00000AA6 6493                   MOV         R9,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AA8 2008                   TST         R0,R0
    00000AAA 8D01                   BT/S        L788
         logic.c   615                            // There is a Block...
         logic.c   616                            ret2 = 1;
         logic.c   617                    }
         logic.c   618                    if (dir == ABOVE) {
    00000AAC 60C3                   MOV         R12,R0
    00000AAE 6D83                   MOV         R8,R13
    00000AB0              L788:                             
    00000AB0 8801                   CMP/EQ      #1,R0
    00000AB2 8B00                   BF          L789
         logic.c   619                            tmp = y;
    00000AB4 6EA3                   MOV         R10,R14
    00000AB6              L789:                             
         logic.c   620                    }
         logic.c   621                    if (isBox1(x, tmp) != 0) {
    00000AB6 65E3                   MOV         R14,R5
    00000AB8 BE32                   BSR         _isBox1
    00000ABA 6493                   MOV         R9,R4
    00000ABC 2008                   TST         R0,R0
    00000ABE 8905                   BT          L790
         logic.c   622                            // There is a Box...
         logic.c   623                            if (dir == ABOVE) {
    00000AC0 60C3                   MOV         R12,R0
    00000AC2 8801                   CMP/EQ      #1,R0
    00000AC4 8B01                   BF          L791
         logic.c   624                                    ret2 = 4;
    00000AC6 A001                   BRA         L790
    00000AC8 ED04                   MOV         #4,R13
    00000ACA              L791:                             
         logic.c   625                            } else {
         logic.c   626                                    ret2 = 1;
    00000ACA 6D83                   MOV         R8,R13
    00000ACC              L790:                             
         logic.c   627                            }
         logic.c   628                    }
         logic.c   629                    if (isCoin1(x, tmp) != 0) {
    00000ACC 65E3                   MOV         R14,R5
    00000ACE BE4E                   BSR         _isCoin1
    00000AD0 6493                   MOV         R9,R4
    00000AD2 2008                   TST         R0,R0
    00000AD4 8D01                   BT/S        L793
    00000AD6 6EBE                   EXTS.B      R11,R14
         logic.c   630                            // Theres a Coin...
         logic.c   631                            ret2 = 2;
    00000AD8 ED02                   MOV         #2,R13
    00000ADA              L793:                             
    00000ADA 2EE8                   TST         R14,R14
    00000ADC 8B04                   BF          L794
    00000ADE 62DE                   EXTS.B      R13,R2
    00000AE0 2228                   TST         R2,R2
    00000AE2 8B01                   BF          L794
    00000AE4              L562:
         logic.c   632                    }
         logic.c   633                    if ((ret1 == 0) && (ret2 == 0)) {
         logic.c   634                            return 0;
    00000AE4 A03C                   BRA         L777




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AE6 E000                   MOV         #0,R0
    00000AE8              L794:                             
         logic.c   635                    }
         logic.c   636                    if ((ret1 == 1) || (ret2 == 1)) {
    00000AE8 60E3                   MOV         R14,R0
    00000AEA 8801                   CMP/EQ      #1,R0
    00000AEC 8902                   BT          L796
    00000AEE 60DE                   EXTS.B      R13,R0
    00000AF0 8801                   CMP/EQ      #1,R0
    00000AF2 8B01                   BF          L795
    00000AF4              L796:                             
         logic.c   637                            return 1;
    00000AF4 A034                   BRA         L777
    00000AF6 E001                   MOV         #1,R0
    00000AF8              L795:                             
         logic.c   638                    }
         logic.c   639                    if ((ret1 == 2) && (ret2 == 3)) {
    00000AF8 60E3                   MOV         R14,R0
    00000AFA 8802                   CMP/EQ      #2,R0
    00000AFC 8B04                   BF          L797
    00000AFE 60DE                   EXTS.B      R13,R0
    00000B00 8803                   CMP/EQ      #3,R0
    00000B02 8B01                   BF          L797
         logic.c   640                            return 6;
    00000B04 A02C                   BRA         L777
    00000B06 E006                   MOV         #6,R0
    00000B08              L797:                             
         logic.c   641                    }
         logic.c   642                    if (((ret1 == 2) || (ret2 == 3)) && ((ret1 == 0) || (ret2 == 0))) {
    00000B08 60E3                   MOV         R14,R0
    00000B0A 8802                   CMP/EQ      #2,R0
    00000B0C 8902                   BT          L799
    00000B0E 60DE                   EXTS.B      R13,R0
    00000B10 8803                   CMP/EQ      #3,R0
    00000B12 8B0A                   BF          L798
    00000B14              L799:                             
    00000B14 2EE8                   TST         R14,R14
    00000B16 8902                   BT          L800
    00000B18 63DE                   EXTS.B      R13,R3
    00000B1A 2338                   TST         R3,R3
    00000B1C 8B05                   BF          L798
    00000B1E              L800:                             
         logic.c   643                            if (ret1 == 0) {
    00000B1E 2EE8                   TST         R14,R14
    00000B20 8B01                   BF          L801
         logic.c   644                                    return 3;
    00000B22 A01D                   BRA         L777
    00000B24 E003                   MOV         #3,R0
    00000B26              L801:                             
         logic.c   645                            } else {
         logic.c   646                                    return 2;
    00000B26 A01B                   BRA         L777
    00000B28 E002                   MOV         #2,R0
    00000B2A              L798:                             
         logic.c   647                            }
         logic.c   648                    }
         logic.c   649                    if (dir == ABOVE) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B2A 60C3                   MOV         R12,R0
    00000B2C 8801                   CMP/EQ      #1,R0
    00000B2E 8B17                   BF          L777
         logic.c   650                            if ((ret1 == 4) && (ret2 == 5)) {
    00000B30 60E3                   MOV         R14,R0
    00000B32 8804                   CMP/EQ      #4,R0
    00000B34 8B04                   BF          L804
    00000B36 60DE                   EXTS.B      R13,R0
    00000B38 8805                   CMP/EQ      #5,R0
    00000B3A 8B01                   BF          L804
         logic.c   651                                    return 7;
    00000B3C A010                   BRA         L777
    00000B3E E007                   MOV         #7,R0
    00000B40              L804:                             
         logic.c   652                            }
         logic.c   653                            if (((ret1 == 4) || (ret2 == 5)) && ((ret1 == 0) || (ret2 == 0))) {
    00000B40 60E3                   MOV         R14,R0
    00000B42 8804                   CMP/EQ      #4,R0
    00000B44 8902                   BT          L806
    00000B46 60DE                   EXTS.B      R13,R0
    00000B48 8805                   CMP/EQ      #5,R0
    00000B4A 8B09                   BF          L777
    00000B4C              L806:                             
    00000B4C 2EE8                   TST         R14,R14
    00000B4E 8902                   BT          L807
    00000B50 63DE                   EXTS.B      R13,R3
    00000B52 2338                   TST         R3,R3
    00000B54 8B04                   BF          L777
    00000B56              L807:                             
         logic.c   654                                    if (ret1 == 0) {
    00000B56 2EE8                   TST         R14,R14
    00000B58 8B01                   BF          L808
         logic.c   655                                            return 5;
    00000B5A A001                   BRA         L777
    00000B5C E005                   MOV         #5,R0
    00000B5E              L808:                             
         logic.c   656                                    } else {
         logic.c   657                                            return 4;
    00000B5E E004                   MOV         #4,R0
         logic.c   658                                    }
         logic.c   659                            }
         logic.c   660                    }
         logic.c   661            }
         logic.c   662    }
    00000B60              L777:                             
    00000B60 7F0C                   ADD         #12,R15
    00000B62 4F26                   LDS.L       @R15+,PR
    00000B64 68F6                   MOV.L       @R15+,R8
    00000B66 69F6                   MOV.L       @R15+,R9
    00000B68 6AF6                   MOV.L       @R15+,R10
    00000B6A 6BF6                   MOV.L       @R15+,R11
    00000B6C 6CF6                   MOV.L       @R15+,R12
    00000B6E 6DF6                   MOV.L       @R15+,R13
    00000B70 000B                   RTS
    00000B72 6EF6                   MOV.L       @R15+,R14
         logic.c   663    
         logic.c   664    int translateBack(char x, char *off) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B74              _translateBack:                  ; function: translateBack
                                                           ; frame size=0
         logic.c   665            *off = x;
         logic.c   666            while((x % 8) != 0) {
    00000B74 A001                   BRA         L810
    00000B76 2540                   MOV.B       R4,@R5
    00000B78              L811:                             
         logic.c   667                    x--;
    00000B78 74FF                   ADD         #-1,R4
    00000B7A              L810:                             
    00000B7A 604E                   EXTS.B      R4,R0
    00000B7C 4011                   CMP/PZ      R0
    00000B7E 8B01                   BF          L812
    00000B80 A005                   BRA         L813
    00000B82 C907                   AND         #7,R0
    00000B84              L812:                             
    00000B84 6007                   NOT         R0,R0
    00000B86 7001                   ADD         #1,R0
    00000B88 C907                   AND         #7,R0
    00000B8A 6007                   NOT         R0,R0
    00000B8C 7001                   ADD         #1,R0
    00000B8E              L813:                             
    00000B8E 2008                   TST         R0,R0
    00000B90 8BF2                   BF          L811
         logic.c   668            }
         logic.c   669            *off -= x;
    00000B92 6150                   MOV.B       @R5,R1
    00000B94 3148                   SUB         R4,R1
         logic.c   670            x /= 8;
    00000B96 644E                   EXTS.B      R4,R4
    00000B98 4411                   CMP/PZ      R4
    00000B9A 8D01                   BT/S        L814
    00000B9C 2510                   MOV.B       R1,@R5
    00000B9E 7407                   ADD         #7,R4
    00000BA0              L814:                             
    00000BA0 4421                   SHAR        R4
    00000BA2 4421                   SHAR        R4
    00000BA4 4421                   SHAR        R4
         logic.c   671            return x;
         logic.c   672    }
    00000BA6 000B                   RTS
    00000BA8 604E                   EXTS.B      R4,R0
         logic.c   673    
         logic.c   674    int gravity1() {
    00000BAA              _gravity1:                       ; function: gravity1
                                                           ; frame size=32
         logic.c   675            // Calculate if Player should fall.
         logic.c   676            // First check if there are any pixels under the player
         logic.c   677            // If this is not the case, we reduce the yPlayer value...
         logic.c   678            // Also check if we are out of the bounds of the screen. Then we die...
         logic.c   679            // This is also handling the players jump...
         logic.c   680            int res;
         logic.c   681            char off; // We ignore the offset. The player will get it anyway...
         logic.c   682            
         logic.c   683            // Fell out of the screen...:
         logic.c   684            if (yPlayer >= 56) {
    00000BAA E238                   MOV         #56,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BAC 2FE6                   MOV.L       R14,@-R15
    00000BAE 2FD6                   MOV.L       R13,@-R15
    00000BB0 2FC6                   MOV.L       R12,@-R15
    00000BB2 2FB6                   MOV.L       R11,@-R15
    00000BB4 2FA6                   MOV.L       R10,@-R15
    00000BB6 4F22                   STS.L       PR,@-R15
    00000BB8 DC05                   MOV.L       L874+2,R12 ; _isJumping
    00000BBA 7FFC                   ADD         #-4,R15
    00000BBC DE05                   MOV.L       L874+6,R14 ; _yPlayer
    00000BBE 63E0                   MOV.B       @R14,R3
    00000BC0 3323                   CMP/GE      R2,R3
    00000BC2 8F09                   BF/S        L816
    00000BC4 EA00                   MOV         #0,R10
         logic.c   685                    killed();
    00000BC6 B0F7                   BSR         _killed
    00000BC8 0009                   NOP
         logic.c   686                    return 0;
    00000BCA A0E7                   BRA         L817
    00000BCC E000                   MOV         #0,R0
    00000BCE              L874:                             
    00000BCE 0000                   .DATA.W     0
    00000BD0 <00000000>             .DATA.L     _isJumping
    00000BD4 <00000000>             .DATA.L     _yPlayer
    00000BD8              L816:                             
         logic.c   687            }
         logic.c   688    
         logic.c   689            if (isJumping > 0) {
    00000BD8 DB74                   MOV.L       L875,R11   ; _xPlayer
    00000BDA DD75                   MOV.L       L875+4,R13 ; _score
    00000BDC 63C2                   MOV.L       @R12,R3
    00000BDE 4315                   CMP/PL      R3
    00000BE0 8901                   BT          L876
    00000BE2 A08B                   BRA         L818
    00000BE4 0009                   NOP
    00000BE6              L876:                             
         logic.c   690                    // We are jumping up...
         logic.c   691                    res = colPlayerVert1(ABOVE);
    00000BE6 BEE8                   BSR         _colPlayerVert1
    00000BE8 E401                   MOV         #1,R4
         logic.c   692                    switch(res) {
    00000BEA 8800                   CMP/EQ      #0,R0
    00000BEC D471                   MOV.L       L875+8,R4  ; _hp
    00000BEE 8D10                   BT/S        L645
    00000BF0 6503                   MOV         R0,R5
    00000BF2 8801                   CMP/EQ      #1,R0
    00000BF4 893C                   BT          L860
    00000BF6 8802                   CMP/EQ      #2,R0
    00000BF8 890F                   BT          L647
    00000BFA 8803                   CMP/EQ      #3,R0
    00000BFC 891E                   BT          L648
    00000BFE 8804                   CMP/EQ      #4,R0
    00000C00 8927                   BT          L649
    00000C02 8805                   CMP/EQ      #5,R0
    00000C04 8936                   BT          L650
    00000C06 8806                   CMP/EQ      #6,R0
    00000C08 8938                   BT          L651
    00000C0A 8807                   CMP/EQ      #7,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C0C 8958                   BT          L652
    00000C0E A0C5                   BRA         L817
    00000C10 0009                   NOP
    00000C12              L645:                            ; case label 
         logic.c   693                            case 0:
         logic.c   694                                    // Nothing
         logic.c   695                                    isJumping--;
    00000C12 62C2                   MOV.L       @R12,R2
    00000C14 72FF                   ADD         #-1,R2
         logic.c   696                                    yPlayer--;
         logic.c   697                                    break;
         logic.c   698                            case 1:
         logic.c   699                                    // Block
         logic.c   700                                    isJumping = 0;
         logic.c   701                                    break;
         logic.c   702                            case 2:
         logic.c   703                                    // Coin
         logic.c   704                                    score++;
         logic.c   705                                    removeCoin1(translateBack(xPlayer, &off), translateBack(yPlayer, &off));
         logic.c   706                                    isJumping--;
         logic.c   707                                    yPlayer--;
         logic.c   708                                    break;
    00000C16 A050                   BRA         L861
    00000C18 2C22                   MOV.L       R2,@R12
    00000C1A              L647:                            ; case label 
    00000C1A 65F3                   MOV         R15,R5
    00000C1C 62D2                   MOV.L       @R13,R2
    00000C1E 7201                   ADD         #1,R2
    00000C20 2D22                   MOV.L       R2,@R13
    00000C22 BFA7                   BSR         _translateBack
    00000C24 64E0                   MOV.B       @R14,R4
    00000C26 6503                   MOV         R0,R5
    00000C28 2F06                   MOV.L       R0,@-R15
    00000C2A 65F3                   MOV         R15,R5
    00000C2C 7504                   ADD         #4,R5
    00000C2E BFA1                   BSR         _translateBack
    00000C30 64B0                   MOV.B       @R11,R4
    00000C32 6403                   MOV         R0,R4
    00000C34 BDC2                   BSR         _removeCoin1
    00000C36 65F6                   MOV.L       @R15+,R5
    00000C38 A004                   BRA         L566
    00000C3A 0009                   NOP
    00000C3C              L648:                            ; case label 
         logic.c   709                            case 3:
         logic.c   710                                    // Coin at the next pos.
         logic.c   711                                    score++;
    00000C3C 61D2                   MOV.L       @R13,R1
    00000C3E 7101                   ADD         #1,R1
    00000C40 A02B                   BRA         L570
    00000C42 2D12                   MOV.L       R1,@R13
    00000C44              L566:
         logic.c   712                                    removeCoin1(translateBack(xPlayer, &off) + 1, translateBack(yPlayer, &off)
                         +);
         logic.c   713                                    isJumping--;
    00000C44 62C2                   MOV.L       @R12,R2
    00000C46 72FF                   ADD         #-1,R2
    00000C48 2C22                   MOV.L       R2,@R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         logic.c   714                                    yPlayer--;
    00000C4A 63E0                   MOV.B       @R14,R3
    00000C4C 73FF                   ADD         #-1,R3
         logic.c   715                                    break;
    00000C4E A0A5                   BRA         L817
    00000C50 2E30                   MOV.B       R3,@R14
    00000C52              L649:                            ; case label 
         logic.c   716                            case 4:
         logic.c   717                                    // Box
         logic.c   718                                    hp++;
         logic.c   719                                    removeBox1(translateBack(xPlayer, &off), translateBack(yPlayer, &off));
    00000C52 65F3                   MOV         R15,R5
    00000C54 6142                   MOV.L       @R4,R1
    00000C56 7101                   ADD         #1,R1
    00000C58 2412                   MOV.L       R1,@R4
    00000C5A BF8B                   BSR         _translateBack
    00000C5C 64E0                   MOV.B       @R14,R4
    00000C5E 6503                   MOV         R0,R5
    00000C60 2F06                   MOV.L       R0,@-R15
    00000C62 65F3                   MOV         R15,R5
    00000C64 7504                   ADD         #4,R5
    00000C66 BF85                   BSR         _translateBack
    00000C68 64B0                   MOV.B       @R11,R4
    00000C6A 6403                   MOV         R0,R4
    00000C6C BDCB                   BSR         _removeBox1
    00000C6E 65F6                   MOV.L       @R15+,R5
         logic.c   720                                    isJumping = 0;
         logic.c   721                                    break;
         logic.c   722                            case 5:
         logic.c   723                                    // Box at next positon
         logic.c   724                                    hp++;
         logic.c   725                                    removeBox1(translateBack(xPlayer, &off) + 1, translateBack(yPlayer, &off))
                         +;
         logic.c   726                                    isJumping = 0;
         logic.c   727                                    break;
    00000C70              L860:                             
    00000C70 A094                   BRA         L817
    00000C72 2CA2                   MOV.L       R10,@R12
    00000C74              L650:                            ; case label 
    00000C74 6342                   MOV.L       @R4,R3
    00000C76 7301                   ADD         #1,R3
    00000C78 A031                   BRA         L572
    00000C7A 2432                   MOV.L       R3,@R4
    00000C7C              L651:                            ; case label 
         logic.c   728                            case 6:
         logic.c   729                                    // Two coins
         logic.c   730                                    score += 2;
    00000C7C 62D2                   MOV.L       @R13,R2
         logic.c   731                                    removeCoin1(translateBack(xPlayer, &off), translateBack(yPlayer, &off));
    00000C7E 65F3                   MOV         R15,R5
    00000C80 7202                   ADD         #2,R2
    00000C82 2D22                   MOV.L       R2,@R13
    00000C84 BF76                   BSR         _translateBack
    00000C86 64E0                   MOV.B       @R14,R4
    00000C88 2F06                   MOV.L       R0,@-R15
    00000C8A 6503                   MOV         R0,R5
    00000C8C 65F3                   MOV         R15,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C8E 7504                   ADD         #4,R5
    00000C90 BF70                   BSR         _translateBack
    00000C92 64B0                   MOV.B       @R11,R4
    00000C94 6403                   MOV         R0,R4
    00000C96 BD91                   BSR         _removeCoin1
    00000C98 65F6                   MOV.L       @R15+,R5
    00000C9A              L570:
         logic.c   732                                    removeCoin1(translateBack(xPlayer, &off) + 1, translateBack(yPlayer, &off)
                         +);
    00000C9A 65F3                   MOV         R15,R5
    00000C9C BF6A                   BSR         _translateBack
    00000C9E 64E0                   MOV.B       @R14,R4
    00000CA0 2F06                   MOV.L       R0,@-R15
    00000CA2 6503                   MOV         R0,R5
    00000CA4 65F3                   MOV         R15,R5
    00000CA6 7504                   ADD         #4,R5
    00000CA8 BF64                   BSR         _translateBack
    00000CAA 64B0                   MOV.B       @R11,R4
    00000CAC 6403                   MOV         R0,R4
    00000CAE 7401                   ADD         #1,R4
    00000CB0 BD84                   BSR         _removeCoin1
    00000CB2 65F6                   MOV.L       @R15+,R5
         logic.c   733                                    isJumping--;
    00000CB4 63C2                   MOV.L       @R12,R3
    00000CB6 73FF                   ADD         #-1,R3
    00000CB8 2C32                   MOV.L       R3,@R12
         logic.c   734                                    yPlayer--;
         logic.c   735                                    break;
    00000CBA              L861:                             
    00000CBA 62E0                   MOV.B       @R14,R2
    00000CBC A02F                   BRA         L862
    00000CBE 72FF                   ADD         #-1,R2
    00000CC0              L652:                            ; case label 
         logic.c   736                            case 7:
         logic.c   737                                    hp += 2;
    00000CC0 6142                   MOV.L       @R4,R1
         logic.c   738                                    removeBox1(translateBack(xPlayer, &off), translateBack(yPlayer, &off));
    00000CC2 65F3                   MOV         R15,R5
    00000CC4 7102                   ADD         #2,R1
    00000CC6 2412                   MOV.L       R1,@R4
    00000CC8 BF54                   BSR         _translateBack
    00000CCA 64E0                   MOV.B       @R14,R4
    00000CCC 2F06                   MOV.L       R0,@-R15
    00000CCE 6503                   MOV         R0,R5
    00000CD0 65F3                   MOV         R15,R5
    00000CD2 7504                   ADD         #4,R5
    00000CD4 BF4E                   BSR         _translateBack
    00000CD6 64B0                   MOV.B       @R11,R4
    00000CD8 6403                   MOV         R0,R4
    00000CDA BD94                   BSR         _removeBox1
    00000CDC 65F6                   MOV.L       @R15+,R5
    00000CDE              L572:
         logic.c   739                                    removeBox1(translateBack(xPlayer, &off) + 1, translateBack(yPlayer, &off))
                         +;
    00000CDE 65F3                   MOV         R15,R5
    00000CE0 BF48                   BSR         _translateBack
    00000CE2 64E0                   MOV.B       @R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CE4 2F06                   MOV.L       R0,@-R15
    00000CE6 6503                   MOV         R0,R5
    00000CE8 65F3                   MOV         R15,R5
    00000CEA 7504                   ADD         #4,R5
    00000CEC BF42                   BSR         _translateBack
    00000CEE 64B0                   MOV.B       @R11,R4
    00000CF0 6403                   MOV         R0,R4
    00000CF2 7401                   ADD         #1,R4
    00000CF4 BD87                   BSR         _removeBox1
    00000CF6 65F6                   MOV.L       @R15+,R5
         logic.c   740                                    isJumping = 0;
         logic.c   741                                    break;
    00000CF8 A050                   BRA         L817
    00000CFA 2CA2                   MOV.L       R10,@R12
    00000CFC              L818:                             
         logic.c   742                    }
         logic.c   743            } else {
         logic.c   744                    // We are not jumping. Just fall correct
         logic.c   745                    res = colPlayerVert1(BELOW);
    00000CFC BE5D                   BSR         _colPlayerVert1
    00000CFE E400                   MOV         #0,R4
         logic.c   746                    switch (res) {
    00000D00 8800                   CMP/EQ      #0,R0
    00000D02 8D0A                   BT/S        L653
    00000D04 6403                   MOV         R0,R4
    00000D06 8801                   CMP/EQ      #1,R0
    00000D08 8948                   BT          L817
    00000D0A 8802                   CMP/EQ      #2,R0
    00000D0C 8909                   BT          L655
    00000D0E 8803                   CMP/EQ      #3,R0
    00000D10 891C                   BT          L656
    00000D12 8806                   CMP/EQ      #6,R0
    00000D14 8921                   BT          L657
    00000D16 A041                   BRA         L817
    00000D18 0009                   NOP
    00000D1A              L653:                            ; case label 
         logic.c   747                            case 0:
         logic.c   748                                    yPlayer++;
    00000D1A 62E0                   MOV.B       @R14,R2
    00000D1C 7201                   ADD         #1,R2
         logic.c   749                                    break;
    00000D1E              L862:                             
    00000D1E A03D                   BRA         L817
    00000D20 2E20                   MOV.B       R2,@R14
    00000D22              L655:                            ; case label 
         logic.c   750                            case 1:
         logic.c   751                                    // Block / Box, do nothing
         logic.c   752                                    break;
         logic.c   753                            case 2:
         logic.c   754                                    yPlayer++;
         logic.c   755                                    score++;
         logic.c   756                                    removeCoin1(translateBack(xPlayer, &off), (translateBack(yPlayer, &off) + 
                         +1));
    00000D22 65F3                   MOV         R15,R5
    00000D24 63E0                   MOV.B       @R14,R3
    00000D26 7301                   ADD         #1,R3
    00000D28 2E30                   MOV.B       R3,@R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D2A 62D2                   MOV.L       @R13,R2
    00000D2C 7201                   ADD         #1,R2
    00000D2E 2D22                   MOV.L       R2,@R13
    00000D30 BF20                   BSR         _translateBack
    00000D32 64E0                   MOV.B       @R14,R4
    00000D34 6503                   MOV         R0,R5
    00000D36 7501                   ADD         #1,R5
    00000D38 2F56                   MOV.L       R5,@-R15
    00000D3A 65F3                   MOV         R15,R5
    00000D3C 7504                   ADD         #4,R5
    00000D3E BF19                   BSR         _translateBack
    00000D40 64B0                   MOV.B       @R11,R4
    00000D42 6403                   MOV         R0,R4
    00000D44 BD3A                   BSR         _removeCoin1
    00000D46 65F6                   MOV.L       @R15+,R5
         logic.c   757                                    break;
    00000D48 A028                   BRA         L817
    00000D4A 0009                   NOP
    00000D4C              L656:                            ; case label 
         logic.c   758                            case 3:
         logic.c   759                                    yPlayer++;
    00000D4C 63E0                   MOV.B       @R14,R3
    00000D4E 7301                   ADD         #1,R3
    00000D50 2E30                   MOV.B       R3,@R14
         logic.c   760                                    score++;
    00000D52 62D2                   MOV.L       @R13,R2
    00000D54 7201                   ADD         #1,R2
    00000D56 A013                   BRA         L563
    00000D58 2D22                   MOV.L       R2,@R13
    00000D5A              L657:                            ; case label 
         logic.c   761                                    removeCoin1(translateBack(xPlayer, &off) + 1, (translateBack(yPlayer, &off
                         +) + 1));
         logic.c   762                                    break;
         logic.c   763                            case 6:
         logic.c   764                                    yPlayer++;
         logic.c   765                                    score += 2;
         logic.c   766                                    removeCoin1(translateBack(xPlayer, &off), (translateBack(yPlayer, &off) + 
                         +1));
    00000D5A 65F3                   MOV         R15,R5
    00000D5C 63E0                   MOV.B       @R14,R3
    00000D5E 7301                   ADD         #1,R3
    00000D60 2E30                   MOV.B       R3,@R14
    00000D62 62D2                   MOV.L       @R13,R2
    00000D64 7202                   ADD         #2,R2
    00000D66 2D22                   MOV.L       R2,@R13
    00000D68 BF04                   BSR         _translateBack
    00000D6A 64E0                   MOV.B       @R14,R4
    00000D6C 6503                   MOV         R0,R5
    00000D6E 7501                   ADD         #1,R5
    00000D70 2F56                   MOV.L       R5,@-R15
    00000D72 65F3                   MOV         R15,R5
    00000D74 7504                   ADD         #4,R5
    00000D76 BEFD                   BSR         _translateBack
    00000D78 64B0                   MOV.B       @R11,R4
    00000D7A 6403                   MOV         R0,R4
    00000D7C BD1E                   BSR         _removeCoin1
    00000D7E 65F6                   MOV.L       @R15+,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D80              L563:
         logic.c   767                                    removeCoin1(translateBack(xPlayer, &off) + 1, (translateBack(yPlayer, &off
                         +) + 1));
    00000D80 65F3                   MOV         R15,R5
    00000D82 BEF7                   BSR         _translateBack
    00000D84 64E0                   MOV.B       @R14,R4
    00000D86 6503                   MOV         R0,R5
    00000D88 7501                   ADD         #1,R5
    00000D8A 2F56                   MOV.L       R5,@-R15
    00000D8C 65F3                   MOV         R15,R5
    00000D8E 7504                   ADD         #4,R5
    00000D90 BEF0                   BSR         _translateBack
    00000D92 64B0                   MOV.B       @R11,R4
    00000D94 6403                   MOV         R0,R4
    00000D96 7401                   ADD         #1,R4
    00000D98 BD10                   BSR         _removeCoin1
    00000D9A 65F6                   MOV.L       @R15+,R5
         logic.c   768                    }
         logic.c   769            }
         logic.c   770    }
    00000D9C              L817:                             
    00000D9C 7F04                   ADD         #4,R15
    00000D9E 4F26                   LDS.L       @R15+,PR
    00000DA0 6AF6                   MOV.L       @R15+,R10
    00000DA2 6BF6                   MOV.L       @R15+,R11
    00000DA4 6CF6                   MOV.L       @R15+,R12
    00000DA6 6DF6                   MOV.L       @R15+,R13
    00000DA8 000B                   RTS
    00000DAA 6EF6                   MOV.L       @R15+,R14
    00000DAC              L875:                             
    00000DAC <00000000>             .DATA.L     _xPlayer
    00000DB0 <00000000>             .DATA.L     _score
    00000DB4 <00000000>             .DATA.L     _hp
         logic.c   771    
         logic.c   772    int killed() {
    00000DB8              _killed:                         ; function: killed
                                                           ; frame size=4
    00000DB8 4F22                   STS.L       PR,@-R15
         logic.c   773            hp--;
         logic.c   774            dirPlayer = 0;
         logic.c   775            xPlayer = 16;
         logic.c   776            yPlayer = 40;
    00000DBA E028                   MOV         #40,R0
    00000DBC D40E                   MOV.L       L877+2,R4  ; _hp
         logic.c   777            viewOffset = 0;
         logic.c   778            locate(3, 5);
    00000DBE E505                   MOV         #5,R5
    00000DC0 D20E                   MOV.L       L877+6,R2  ; _dirPlayer
    00000DC2 6342                   MOV.L       @R4,R3
    00000DC4 D10E                   MOV.L       L877+10,R1 ; _xPlayer
    00000DC6 73FF                   ADD         #-1,R3
    00000DC8 2432                   MOV.L       R3,@R4
    00000DCA E400                   MOV         #0,R4
    00000DCC 2240                   MOV.B       R4,@R2
    00000DCE E310                   MOV         #16,R3
    00000DD0 D20D                   MOV.L       L877+18,R2 ; _viewOffset
    00000DD2 2130                   MOV.B       R3,@R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DD4 D30B                   MOV.L       L877+14,R3 ; _yPlayer
    00000DD6 2300                   MOV.B       R0,@R3
    00000DD8 2242                   MOV.L       R4,@R2
    00000DDA D10C                   MOV.L       L877+22,R1 ; _locate
    00000DDC 410B                   JSR         @R1
    00000DDE E403                   MOV         #3,R4
         logic.c   779            Print((unsigned char*)"Killed");
    00000DE0 D40B                   MOV.L       L877+26,R4 ; L553
    00000DE2 D30C                   MOV.L       L877+30,R3 ; _Print
    00000DE4 430B                   JSR         @R3
    00000DE6 0009                   NOP
         logic.c   780            draw();
    00000DE8 D20B                   MOV.L       L877+34,R2 ; _draw
    00000DEA 420B                   JSR         @R2
    00000DEC 0009                   NOP
         logic.c   781            Sleep(1000);
    00000DEE 9402                   MOV.W       L877,R4    ; H'03E8
    00000DF0 D30A                   MOV.L       L877+38,R3 ; _Sleep
    00000DF2 432B                   JMP         @R3
    00000DF4 4F26                   LDS.L       @R15+,PR
    00000DF6              L877:                             
    00000DF6 03E8                   .DATA.W     H'03E8
    00000DF8 <00000000>             .DATA.L     _hp
    00000DFC <00000000>             .DATA.L     _dirPlayer
    00000E00 <00000000>             .DATA.L     _xPlayer
    00000E04 <00000000>             .DATA.L     _yPlayer
    00000E08 <00000000>             .DATA.L     _viewOffset
    00000E0C <00000000>             .DATA.L     _locate
    00000E10 <00000000>             .DATA.L     L553
    00000E14 <00000000>             .DATA.L     _Print
    00000E18 <00000000>             .DATA.L     _draw
    00000E1C <00000000>             .DATA.L     _Sleep
         logic.c   782    }
D   00000000              _hp:                             ; static: hp
    00000000 00000005               .DATA.L     H'00000005
    00000004              _score:                          ; static: score
    00000004 00000000               .DATA.L     H'00000000
    00000008              _xPlayer:                        ; static: xPlayer
    00000008 10                     .DATA.B     H'10
    00000009              _yPlayer:                        ; static: yPlayer
    00000009 28                     .DATA.B     H'28
    0000000A              _dirPlayer:                      ; static: dirPlayer
    0000000A 00                     .DATA.B     H'00
    0000000B 00000001               .RES.B      1
    0000000C              _viewOffset:                     ; static: viewOffset
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _isJumping:                      ; static: isJumping
    00000010 00000000               .DATA.L     H'00000000
    00000014              _timer1:                         ; static: timer1
    00000014 00000000               .DATA.L     H'00000000
    00000018              _timer1Flag:                     ; static: timer1Flag
    00000018 00000000               .DATA.L     H'00000000
C   00000000              L415:
    00000000 48503A                 .SDATA      "HP:"
    00000003 00                     .DATA.B     H'00
    00000004              L416:
    00000004 53434F5245             .SDATA      "SCORE:"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             3A           
    0000000A 00                     .DATA.B     H'00
    0000000B 00000001               .RES.B      1
    0000000C              L553:
    0000000C 4B696C6C65             .SDATA      "Killed"
             64           
    00000012 00                     .DATA.B     H'00
B   00000000              _HUDstring:                      ; static: HUDstring
    00000000 00000004               .RES.B      4




















































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 02-Mar-2011 20:13:40  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         1




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      782



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000E20 Byte(s)
CONSTANT SECTION (C):                               00000013 Byte(s)
DATA     SECTION (D):                               0000001C Byte(s)
BSS      SECTION (B):                               00000004 Byte(s)

 TOTAL PROGRAM SIZE: 00000E53 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           39
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          32
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           288






























*** COMMAND PARAMETER ***


  -subcommand=C:\users\thomas\Temp\hmk5ba4.tmp 

